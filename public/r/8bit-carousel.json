{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "8bit-carousel",
  "type": "registry:component",
  "title": "8-bit Card",
  "description": "A simple 8-bit carousel component",
  "registryDependencies": [
    "carousel"
  ],
  "files": [
    {
      "path": "components/ui/8bit/carousel.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport useEmblaCarousel, {\r\n  type UseEmblaCarouselType,\r\n} from \"embla-carousel-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/8bit/button\"\r\n\r\ntype CarouselApi = UseEmblaCarouselType[1]\r\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\r\ntype CarouselOptions = UseCarouselParameters[0]\r\ntype CarouselPlugin = UseCarouselParameters[1]\r\n\r\ntype CarouselProps = {\r\n  opts?: CarouselOptions\r\n  plugins?: CarouselPlugin\r\n  orientation?: \"horizontal\" | \"vertical\"\r\n  setApi?: (api: CarouselApi) => void\r\n}\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\r\n  api: ReturnType<typeof useEmblaCarousel>[1]\r\n  scrollPrev: () => void\r\n  scrollNext: () => void\r\n  canScrollPrev: boolean\r\n  canScrollNext: boolean\r\n} & CarouselProps\r\n\r\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\r\n\r\nfunction useCarousel() {\r\n  const context = React.useContext(CarouselContext)\r\n\r\n  if (!context) {\r\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst Carousel = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\r\n>(\r\n  (\r\n    {\r\n      orientation = \"horizontal\",\r\n      opts,\r\n      setApi,\r\n      plugins,\r\n      className,\r\n      children,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const [carouselRef, api] = useEmblaCarousel(\r\n      {\r\n        ...opts,\r\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\r\n      },\r\n      plugins\r\n    )\r\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\r\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\r\n\r\n    const onSelect = React.useCallback((api: CarouselApi) => {\r\n      if (!api) {\r\n        return\r\n      }\r\n\r\n      setCanScrollPrev(api.canScrollPrev())\r\n      setCanScrollNext(api.canScrollNext())\r\n    }, [])\r\n\r\n    const scrollPrev = React.useCallback(() => {\r\n      console.log(\"scrolled prev\")\r\n      api?.scrollPrev()\r\n    }, [api])\r\n\r\n    const scrollNext = React.useCallback(() => {\r\n      console.log(\"scrolled next\")\r\n      api?.scrollNext()\r\n    }, [api])\r\n\r\n    const handleKeyDown = React.useCallback(\r\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n        if (event.key === \"ArrowLeft\") {\r\n          event.preventDefault()\r\n          scrollPrev()\r\n        } else if (event.key === \"ArrowRight\") {\r\n          event.preventDefault()\r\n          scrollNext()\r\n        }\r\n      },\r\n      [scrollPrev, scrollNext]\r\n    )\r\n\r\n    React.useEffect(() => {\r\n      if (!api || !setApi) {\r\n        return\r\n      }\r\n\r\n      setApi(api)\r\n    }, [api, setApi])\r\n\r\n    React.useEffect(() => {\r\n      if (!api) {\r\n        return\r\n      }\r\n\r\n      onSelect(api)\r\n      api.on(\"reInit\", onSelect)\r\n      api.on(\"select\", onSelect)\r\n\r\n      return () => {\r\n        api?.off(\"select\", onSelect)\r\n      }\r\n    }, [api, onSelect])\r\n\r\n    return (\r\n      <CarouselContext.Provider\r\n        value={{\r\n          carouselRef,\r\n          api: api,\r\n          opts,\r\n          orientation:\r\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\r\n          scrollPrev,\r\n          scrollNext,\r\n          canScrollPrev,\r\n          canScrollNext,\r\n        }}\r\n      >\r\n        <div\r\n          ref={ref}\r\n          onKeyDownCapture={handleKeyDown}\r\n          className={cn(\"relative\", className)}\r\n          role=\"region\"\r\n          aria-roledescription=\"carousel\"\r\n          {...props}\r\n        >\r\n          {children}\r\n        </div>\r\n      </CarouselContext.Provider>\r\n    )\r\n  }\r\n)\r\nCarousel.displayName = \"Carousel\"\r\n\r\nconst CarouselContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { carouselRef, orientation } = useCarousel()\r\n\r\n  return (\r\n    <div ref={carouselRef} className=\"overflow-hidden\">\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex\",\r\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n    </div>\r\n  )\r\n})\r\nCarouselContent.displayName = \"CarouselContent\"\r\n\r\nconst CarouselItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { orientation } = useCarousel()\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      role=\"group\"\r\n      aria-roledescription=\"slide\"\r\n      className={cn(\r\n        \"min-w-0 shrink-0 grow-0 basis-full\",\r\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nCarouselItem.displayName = \"CarouselItem\"\r\n\r\nconst CarouselPrevious = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\r\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      variant={variant}\r\n      size={size}\r\n      className={cn(\r\n        orientation === \"horizontal\"\r\n          ? \"top-1/2 -left-10 md:-left-14 -translate-y-1/2 active:-translate-y-1 w-8 h-9 md:w-9 md:h-10 \"\r\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90 w-8 h-10 md:w-9 md:h-11\",\r\n        \"absolute rounded-none aspect-square grid place-items-center\",\r\n        className\r\n      )}\r\n      disabled={!canScrollPrev}\r\n      onClick={scrollPrev}\r\n      {...props}\r\n    >\r\n      <svg\r\n        width=\"50\"\r\n        height=\"50\"\r\n        viewBox=\"0 0 256 256\"\r\n        fill=\"currentColor\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"0.25\"\r\n        color=\"currentColor\"\r\n        aria-label=\"arrow-left\"\r\n      >\r\n        <rect x=\"64\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"96\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"80\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"112\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"144\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"160\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"80\" y=\"104\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"96\" y=\"88\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"112\" y=\"72\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"80\" y=\"136\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"96\" y=\"152\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"112\" y=\"168\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"176\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"128\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n      </svg>\r\n      <span className=\"sr-only\">Previous slide</span>\r\n    </Button>\r\n  )\r\n})\r\nCarouselPrevious.displayName = \"CarouselPrevious\"\r\n\r\nconst CarouselNext = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<typeof Button>\r\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\r\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\r\n\r\n  return (\r\n    <Button\r\n      ref={ref}\r\n      variant={variant}\r\n      size={size}\r\n      className={cn(\r\n        orientation === \"horizontal\"\r\n          ? \"top-1/2 -right-10 md:-right-14 -translate-y-1/2 active:-translate-y-1 aspect-square shrink-0 w-8 h-9 md:w-9 md:h-10 \"\r\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90 w-8 h-10 md:w-9 md:h-11\",\r\n        \"absolute rounded-none aspect-square grid place-items-center\",\r\n        className\r\n      )}\r\n      disabled={!canScrollNext}\r\n      onClick={scrollNext}\r\n      {...props}\r\n    >\r\n      <svg\r\n        width=\"50\"\r\n        height=\"50\"\r\n        viewBox=\"0 0 256 256\"\r\n        fill=\"currentColor\"\r\n        className=\"block\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"0.25\"\r\n        color=\"currentColor\"\r\n        aria-label=\"arrow-right\"\r\n      >\r\n        <rect x=\"64\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"96\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"80\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"112\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"144\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"160\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"160\" y=\"136\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"144\" y=\"152\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"128\" y=\"72\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"128\" y=\"168\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"176\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"160\" y=\"104\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"144\" y=\"88\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n        <rect x=\"128\" y=\"120\" width=\"14\" height=\"14\" rx=\"1\"></rect>\r\n      </svg>\r\n      <span className=\"sr-only\">Next slide</span>\r\n    </Button>\r\n  )\r\n})\r\nCarouselNext.displayName = \"CarouselNext\"\r\n\r\nexport {\r\n  type CarouselApi,\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselPrevious,\r\n  CarouselNext,\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/carousel.tsx"
    }
  ]
}