{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "8bit-combo-box",
  "type": "registry:component",
  "title": "8-bit Combo Box",
  "description": "Combo Box component with 8-bit style",
  "registryDependencies": [],
  "files": [
    {
      "path": "components/ui/8bit/combo-box.tsx",
      "content": "\"use client\"\n\n// 8-bit ComboBox\nimport * as React from \"react\"\nimport { Press_Start_2P } from \"next/font/google\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { CheckIcon, ChevronDownIcon } from \"raster-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\n\nconst pressStart = Press_Start_2P({\n  weight: [\"400\"],\n  subsets: [\"latin\"],\n})\nexport interface ComboBoxItem {\n  value: string\n  label: string\n}\n\nconst number: ComboBoxItem[] = [\n  {\n    value: \"1\",\n    label: \"Number 1\",\n  },\n  {\n    value: \"2\",\n    label: \"Number 2\",\n  },\n  {\n    value: \"3\",\n    label: \"Number 3\",\n  },\n]\nexport const comboBoxVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: pressStart.className,\n    },\n  },\n})\n\nexport interface ComboBoxProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof comboBoxVariants> {\n  asChild?: boolean\n  options?: ComboBoxItem[]\n  placeholder?: string\n  ref?: React.Ref<HTMLButtonElement>\n}\nexport function Combobox({ ...props }: ComboBoxProps) {\n  const { font, className, options = number, placeholder } = props\n  const [open, setOpen] = React.useState(false)\n  const [value, setValue] = React.useState(\"\")\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <div className=\"relative w-[250px]\">\n          <div className=\"absolute -top-1 w-[230px] left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute -top-1 w-[10px] right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute -bottom-1.5 w-[230px] left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute -bottom-1.5 w-[10px] right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute top-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute top-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute bottom-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute bottom-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute top-2 -left-1.5 h-[20px] w-1.5 bg-foreground dark:bg-ring\" />\n          <div className=\"absolute top-2 -right-1.5 h-[20px] w-1.5 bg-foreground dark:bg-ring\" />\n          <Button\n            role=\"combobox\"\n            aria-expanded={open}\n            className=\"w-full justify-between relative -z-1 bg-background\"\n          >\n            <span\n              className={cn(\n                \"text-[12px]\",\n                font !== \"normal\" && pressStart.className,\n                className\n              )}\n            >\n              {value\n                ? options.find((option) => option.value === value)?.label\n                : placeholder}\n            </span>\n            <ChevronDownIcon\n              className=\"w-12 h-12\"\n              size={16}\n              strokeWidth={0.25}\n              radius={1}\n            />\n          </Button>\n        </div>\n      </PopoverTrigger>\n\n      <PopoverContent\n        className={cn(\n          \"w-[240px] h-[180px] top-4 p-0 rounded-none relative\",\n          font !== \"normal\" && pressStart.className,\n          className\n        )}\n      >\n        <div className=\"absolute -top-1 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute -top-1 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute -bottom-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute -bottom-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute top-0 left-0 size-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute top-0 right-0 size-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute bottom-0 left-0 size-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute bottom-0 right-0 size-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute top-2 -left-1.5 h-[165px] w-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n        <div className=\"absolute top-2 -right-1.5 h-[165px] w-1.5 bg-foreground dark:bg-foreground dark:bg-ring\" />\n\n        <Command>\n          <CommandInput\n            className=\"text-[12px]\"\n            placeholder=\"Search number...\"\n          />\n          <CommandList>\n            <CommandEmpty>No Values found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  className=\"text-[12px] hover:bg-white/30 bg-transparent rounded-none border-dotted border-y-4 border-transparent \n                  hover:border-ring focus:border-foreground focus:bg-transparent data-[selected]:bg-transparent\n                  dark:focus:border-ring dark:data-[selected]:bg-transparent\"\n                  key={option.value}\n                  value={option.value}\n                  onSelect={(currentValue) => {\n                    setValue(currentValue === value ? \"\" : currentValue)\n                    setOpen(false)\n                  }}\n                >\n                  <CheckIcon\n                    className={cn(\n                      \"mr-2 w-4 h-4\",\n                      value === option.value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                    size={16}\n                    strokeWidth={0.25}\n                    radius={1}\n                  />\n\n                  {option.label}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/combo-box.tsx"
    }
  ]
}