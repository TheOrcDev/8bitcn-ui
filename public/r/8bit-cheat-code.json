{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "8bit-cheat-code",
  "type": "registry:component",
  "title": "8-bit Cheat Code",
  "description": "An interactive Konami cheat code block",
  "registryDependencies": [
    "alert",
    "card"
  ],
  "files": [
    {
      "path": "components/ui/8bit/blocks/cheat-code.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport {\n  ArrowDown,\n  ArrowLeft,\n  ArrowRight,\n  ArrowUp,\n  Sparkles,\n} from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Alert, AlertDescription } from \"@/components/ui/8bit/alert\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/8bit/card\";\n\nconst KONAMI_SEQUENCE: Array<string> = [\n  \"ArrowUp\",\n  \"ArrowUp\",\n  \"ArrowDown\",\n  \"ArrowDown\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"b\",\n  \"a\",\n  \"Enter\",\n];\n\nfunction getIconForKey(key: string) {\n  switch (key) {\n    case \"ArrowUp\":\n      return <ArrowUp className=\"size-4\" />;\n    case \"ArrowDown\":\n      return <ArrowDown className=\"size-4\" />;\n    case \"ArrowLeft\":\n      return <ArrowLeft className=\"size-4\" />;\n    case \"ArrowRight\":\n      return <ArrowRight className=\"size-4\" />;\n    case \"Enter\":\n      return <span className=\"text-[10px]\">START</span>;\n    case \"a\":\n    case \"b\":\n      return <span className=\"text-[10px] uppercase\">{key}</span>;\n    default:\n      return <span className=\"text-[10px]\">{key}</span>;\n  }\n}\n\nexport default function CheatCode({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const [progress, setProgress] = React.useState<number>(0);\n  const [activated, setActivated] = React.useState<boolean>(false);\n  const resetTimerRef = React.useRef<number | null>(null);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (activated) return;\n\n      const key = event.key.length === 1 ? event.key.toLowerCase() : event.key;\n      const expected = KONAMI_SEQUENCE[progress];\n\n      // Reset inactivity timer\n      if (resetTimerRef.current) window.clearTimeout(resetTimerRef.current);\n      resetTimerRef.current = window.setTimeout(() => setProgress(0), 2000);\n\n      if (key === expected) {\n        const next = progress + 1;\n        setProgress(next);\n\n        if (next === KONAMI_SEQUENCE.length) {\n          setActivated(true);\n          if (resetTimerRef.current) window.clearTimeout(resetTimerRef.current);\n        }\n      } else {\n        // Allow overlapping prefix (e.g., pressing Up when sequence starts with Up)\n        if (key === KONAMI_SEQUENCE[0]) {\n          setProgress(1);\n        } else {\n          setProgress(0);\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      if (resetTimerRef.current) window.clearTimeout(resetTimerRef.current);\n    };\n  }, [activated, progress]);\n\n  const reset = () => {\n    setActivated(false);\n    setProgress(0);\n  };\n\n  return (\n    <Card className={cn(className)} {...props}>\n      <CardHeader className=\"items-center text-center gap-2\">\n        <CardTitle>Cheat Code</CardTitle>\n        <CardDescription>Try the classic code on your keyboard</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center gap-6\">\n        <div className=\"grid grid-cols-6 sm:grid-cols-11 gap-2\">\n          {KONAMI_SEQUENCE.map((k, i) => (\n            <div\n              key={i}\n              className={cn(\n                \"relative flex h-10 w-10 items-center justify-center bg-secondary text-secondary-foreground\",\n                \"border-2 border-foreground dark:border-ring\",\n                progress > i && \"bg-primary text-primary-foreground\"\n              )}\n              aria-label={`step-${i + 1}`}\n            >\n              {getIconForKey(k)}\n            </div>\n          ))}\n        </div>\n\n        {activated ? (\n          <Alert className=\"w-full max-w-md text-center px-4 py-3\">\n            <AlertDescription className=\"flex items-center justify-center gap-2\">\n              <Sparkles className=\"size-4\" />\n              Cheat activated! Extra retro vibes unlocked.\n            </AlertDescription>\n          </Alert>\n        ) : (\n          <Alert className=\"w-full max-w-md text-center px-4 py-3\">\n            <AlertDescription>\n              Press the sequence shown above. Progress resets after inactivity.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {activated && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className={cn(\n              \"rounded-none relative inline-flex items-center justify-center gap-1.5\",\n              \"px-4 py-2 bg-foreground text-background active:translate-y-1\"\n            )}\n          >\n            Reset\n            <div className=\"absolute -top-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute -top-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute -bottom-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute -bottom-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute bottom-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute bottom-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-1.5 -left-1.5 h-2/3 w-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-1.5 -right-1.5 h-2/3 w-1.5 bg-foreground dark:bg-ring\" />\n          </button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/blocks/cheat-code.tsx"
    },
    {
      "path": "components/ui/8bit/alert.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Alert as ShadcnAlert,\n  AlertDescription as ShadcnAlertDescription,\n  AlertTitle as ShadcnAlertTitle,\n} from \"@/components/ui/alert\";\n\nexport const alertVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n    variant: {\n      default: \"bg-card text-card-foreground\",\n      destructive:\n        \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport interface BitAlertProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof alertVariants> {}\n\nfunction Alert({ children, ...props }: BitAlertProps) {\n  const { variant, className, font } = props;\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <ShadcnAlert\n        {...props}\n        variant={variant}\n        className={cn(\n          \"relative rounded-none border-none bg-background\",\n          font !== \"normal\" && \"retro\",\n          className\n        )}\n      >\n        {children}\n      </ShadcnAlert>\n\n      <div className=\"absolute -top-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute -top-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute -bottom-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute -bottom-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute top-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute top-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute bottom-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute bottom-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute top-1.5 -left-1.5 h-1/2 w-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute bottom-1.5 -left-1.5 h-1/2 w-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute top-1.5 -right-1.5 h-1/2 w-1.5 bg-foreground dark:bg-ring\" />\n      <div className=\"absolute bottom-1.5 -right-1.5 h-1/2 w-1.5 bg-foreground dark:bg-ring\" />\n    </div>\n  );\n}\n\nfunction AlertTitle({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <ShadcnAlertTitle\n      className={cn(\"line-clamp-1 font-medium tracking-tight\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <ShadcnAlertDescription\n      className={cn(\n        \"text-muted-foreground grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Alert, AlertTitle, AlertDescription };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/alert.tsx"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Card as ShadcnCard,\n  CardAction as ShadcnCardAction,\n  CardContent as ShadcnCardContent,\n  CardDescription as ShadcnCardDescription,\n  CardFooter as ShadcnCardFooter,\n  CardHeader as ShadcnCardHeader,\n  CardTitle as ShadcnCardTitle,\n} from \"@/components/ui/card\";\n\nimport \"./styles/retro.css\";\n\nexport const cardVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n});\n\nexport interface BitCardProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof cardVariants> {\n  asChild?: boolean;\n}\n\nfunction Card({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <div\n      className={cn(\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\n        className\n      )}\n    >\n      <ShadcnCard\n        {...props}\n        className={cn(\n          \"rounded-none border-0 !w-full\",\n          font !== \"normal\" && \"retro\",\n          className\n        )}\n      />\n\n      <div\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n}\n\nfunction CardHeader({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardHeader\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardTitle\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardDescription\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardAction\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardContent\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardFooter\n      data-slot=\"card-footer\"\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\n\n.retro {\n  font-family:\n    \"Press Start 2P\",\n    system-ui,\n    -apple-system,\n    sans-serif;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}