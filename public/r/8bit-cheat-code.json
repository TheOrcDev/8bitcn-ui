{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "8bit-cheat-code",
  "type": "registry:component",
  "title": "8-bit Cheat Code",
  "description": "An interactive Konami cheat code block",
  "registryDependencies": ["alert", "card"],
  "files": [
    {
      "path": "components/ui/8bit/blocks/cheat-code.tsx",
      "type": "registry:component",
      "target": "components/ui/8bit/blocks/cheat-code.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { ArrowDown, ArrowLeft, ArrowRight, ArrowUp, Sparkles } from \"lucide-react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/8bit/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/8bit/alert\";\n\nconst KONAMI_SEQUENCE: Array<string> = [\n  \"ArrowUp\",\n  \"ArrowUp\",\n  \"ArrowDown\",\n  \"ArrowDown\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"ArrowLeft\",\n  \"ArrowRight\",\n  \"b\",\n  \"a\",\n  \"Enter\",\n];\n\nfunction getIconForKey(key: string) {\n  switch (key) {\n    case \"ArrowUp\":\n      return <ArrowUp className=\"size-4\" />;\n    case \"ArrowDown\":\n      return <ArrowDown className=\"size-4\" />;\n    case \"ArrowLeft\":\n      return <ArrowLeft className=\"size-4\" />;\n    case \"ArrowRight\":\n      return <ArrowRight className=\"size-4\" />;\n    case \"Enter\":\n      return <span className=\"text-[10px]\">START</span>;\n    case \"a\":\n    case \"b\":\n      return <span className=\"text-[10px] uppercase\">{key}</span>;\n    default:\n      return <span className=\"text-[10px]\">{key}</span>;\n  }\n}\n\nexport default function CheatCode({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  const [progress, setProgress] = React.useState<number>(0);\n  const [activated, setActivated] = React.useState<boolean>(false);\n  const resetTimerRef = React.useRef<number | null>(null);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (activated) return;\n\n      const key = event.key.length === 1 ? event.key.toLowerCase() : event.key;\n      const expected = KONAMI_SEQUENCE[progress];\n\n      // Reset inactivity timer\n      if (resetTimerRef.current) window.clearTimeout(resetTimerRef.current);\n      resetTimerRef.current = window.setTimeout(() => setProgress(0), 2000);\n\n      if (key === expected) {\n        const next = progress + 1;\n        setProgress(next);\n\n        if (next === KONAMI_SEQUENCE.length) {\n          setActivated(true);\n          if (resetTimerRef.current) window.clearTimeout(resetTimerRef.current);\n        }\n      } else {\n        // Allow overlapping prefix (e.g., pressing Up when sequence starts with Up)\n        if (key === KONAMI_SEQUENCE[0]) {\n          setProgress(1);\n        } else {\n          setProgress(0);\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown);\n      if (resetTimerRef.current) window.clearTimeout(resetTimerRef.current);\n    };\n  }, [activated, progress]);\n\n  const reset = () => {\n    setActivated(false);\n    setProgress(0);\n  };\n\n  return (\n    <Card className={cn(className)} {...props}>\n      <CardHeader className=\"items-center text-center gap-2\">\n        <CardTitle>Cheat Code</CardTitle>\n        <CardDescription>Try the classic code on your keyboard</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center gap-6\">\n        <div className=\"grid grid-cols-6 sm:grid-cols-11 gap-2\">\n          {KONAMI_SEQUENCE.map((k, i) => (\n            <div\n              key={i}\n              className={cn(\n                \"relative flex h-10 w-10 items-center justify-center bg-secondary text-secondary-foreground\",\n                \"border-2 border-foreground dark:border-ring\",\n                progress > i && \"bg-primary text-primary-foreground\"\n              )}\n              aria-label={`step-${i + 1}`}\n            >\n              {getIconForKey(k)}\n            </div>\n          ))}\n        </div>\n\n        {activated ? (\n          <Alert className=\"w-full max-w-md text-center px-4 py-3\">\n            <AlertDescription className=\"flex items-center justify-center gap-2\">\n              <Sparkles className=\"size-4\" />\n              Cheat activated! Extra retro vibes unlocked.\n            </AlertDescription>\n          </Alert>\n        ) : (\n          <Alert className=\"w-full max-w-md text-center px-4 py-3\">\n            <AlertDescription>\n              Press the sequence shown above. Progress resets after inactivity.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {activated && (\n          <button\n            type=\"button\"\n            onClick={reset}\n            className={cn(\n              \"rounded-none relative inline-flex items-center justify-center gap-1.5\",\n              \"px-4 py-2 bg-foreground text-background active:translate-y-1\"\n            )}\n          >\n            Reset\n            <div className=\"absolute -top-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute -top-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute -bottom-1.5 w-1/2 left-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute -bottom-1.5 w-1/2 right-1.5 h-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute bottom-0 left-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute bottom-0 right-0 size-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-1.5 -left-1.5 h-2/3 w-1.5 bg-foreground dark:bg-ring\" />\n            <div className=\"absolute top-1.5 -right-1.5 h-2/3 w-1.5 bg-foreground dark:bg-ring\" />\n          </button>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n"
    }
  ]
}
