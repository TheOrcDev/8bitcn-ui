{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "leaderboard",
  "type": "registry:component",
  "title": "8-bit Leaderboard",
  "description": "A retro-styled leaderboard component for displaying player rankings with avatars and scores.",
  "registryDependencies": [
    "card",
    "avatar",
    "badge",
    "separator"
  ],
  "files": [
    {
      "path": "components/ui/8bit/leaderboard.tsx",
      "content": "import * as React from \"react\";\n\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/ui/8bit/avatar\";\nimport { Badge } from \"@/components/ui/8bit/badge\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/8bit/card\";\nimport { Separator } from \"@/components/ui/8bit/separator\";\n\nimport \"./styles/retro.css\";\n\nexport interface LeaderboardPlayer {\n  id: string;\n  name: string;\n  score: number;\n  rank?: number;\n  isCurrentPlayer?: boolean;\n  avatar?: string;\n  avatarFallback?: string;\n}\n\nexport interface LeaderboardProps extends React.ComponentProps<\"div\"> {\n  players: LeaderboardPlayer[];\n  maxPlayers?: number;\n  showRank?: boolean;\n  showAvatar?: boolean;\n  className?: string;\n  title?: string;\n  currentPlayerId?: string;\n}\n\nconst playerItemVariants = cva(\n  \"flex items-center justify-between p-3 rounded-lg transition-all duration-200\",\n  {\n    variants: {\n      rank: {\n        default: \"bg-muted/50 hover:bg-muted\",\n        first:\n          \"bg-gradient-to-r from-yellow-400/20 to-yellow-600/20 border-2 border-yellow-400 hover:from-yellow-400/30 hover:to-yellow-600/30\",\n        second:\n          \"bg-gradient-to-r from-gray-300/20 to-gray-500/20 border-2 border-gray-400 hover:from-gray-300/30 hover:to-gray-500/30\",\n        third:\n          \"bg-gradient-to-r from-amber-600/20 to-amber-800/20 border-2 border-amber-600 hover:from-amber-600/30 hover:to-amber-800/30\",\n        current: \"bg-primary/20 border-2 border-primary hover:bg-primary/30\",\n      },\n    },\n    defaultVariants: {\n      rank: \"default\",\n    },\n  }\n);\n\nconst rankBadgeVariants = cva(\n  \"flex items-center justify-center size-8 text-sm font-bold\",\n  {\n    variants: {\n      rank: {\n        default: \"bg-muted text-muted-foreground\",\n        first:\n          \"bg-gradient-to-br from-yellow-400 to-yellow-600 text-yellow-900 shadow-lg\",\n        second:\n          \"bg-gradient-to-br from-gray-300 to-gray-500 text-gray-900 shadow-lg\",\n        third:\n          \"bg-gradient-to-br from-amber-600 to-amber-800 text-amber-100 shadow-lg\",\n        current: \"bg-primary text-primary-foreground\",\n      },\n    },\n    defaultVariants: {\n      rank: \"default\",\n    },\n  }\n);\n\nfunction getRankVariant(\n  rank: number,\n  isCurrentPlayer: boolean\n): \"default\" | \"first\" | \"second\" | \"third\" | \"current\" {\n  if (isCurrentPlayer) return \"current\";\n  if (rank === 1) return \"first\";\n  if (rank === 2) return \"second\";\n  if (rank === 3) return \"third\";\n  return \"default\";\n}\n\nfunction formatScore(score: number): string {\n  return score.toLocaleString();\n}\n\nfunction getRankIcon(rank: number): string {\n  switch (rank) {\n    case 1:\n      return \"ðŸ¥‡\";\n    case 2:\n      return \"ðŸ¥ˆ\";\n    case 3:\n      return \"ðŸ¥‰\";\n    default:\n      return rank.toString();\n  }\n}\n\nexport function Leaderboard({\n  players,\n  maxPlayers = 10,\n  showRank = true,\n  showAvatar = true,\n  className,\n  title = \"LEADERBOARD\",\n  currentPlayerId,\n  ...props\n}: LeaderboardProps) {\n  // Sort players by score (descending) and assign ranks\n  const sortedPlayers = React.useMemo(() => {\n    return players\n      .sort((a, b) => b.score - a.score)\n      .slice(0, maxPlayers)\n      .map((player, index) => ({\n        ...player,\n        rank: index + 1,\n        isCurrentPlayer: currentPlayerId\n          ? player.id === currentPlayerId\n          : player.isCurrentPlayer,\n      }));\n  }, [players, maxPlayers, currentPlayerId]);\n\n  return (\n    <Card\n      data-slot=\"leaderboard\"\n      className={className}\n      font={\"retro\"}\n      {...props}\n    >\n      {title && (\n        <CardHeader>\n          <CardTitle className=\"text-center\">{title}</CardTitle>\n        </CardHeader>\n      )}\n\n      <CardContent className=\"space-y-5\">\n        <div className=\"space-y-2\">\n          {sortedPlayers.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <p className=\"retro text-sm\">No players yet</p>\n            </div>\n          ) : (\n            sortedPlayers.map((player) => {\n              const rankVariant = getRankVariant(\n                player.rank!,\n                player.isCurrentPlayer!\n              );\n\n              return (\n                <div\n                  key={player.id}\n                  className={cn(\n                    playerItemVariants({ rank: rankVariant }),\n                    \"retro\"\n                  )}\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {showAvatar && (\n                      <Avatar variant=\"pixel\" font=\"retro\" className=\"size-10\">\n                        {player.avatar && (\n                          <AvatarImage src={player.avatar} alt={player.name} />\n                        )}\n                        <AvatarFallback className=\"retro text-xs\">\n                          {player.avatarFallback ||\n                            player.name.charAt(0).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n\n                    {showRank && !showAvatar && (\n                      <div\n                        className={cn(rankBadgeVariants({ rank: rankVariant }))}\n                      >\n                        <span className=\"text-xs\">\n                          {getRankIcon(player.rank!)}\n                        </span>\n                      </div>\n                    )}\n\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-4\">\n                        <span\n                          className={cn(\n                            \"font-medium truncate retro text-xs md:text-sm\",\n                            player.isCurrentPlayer && \"text-primary font-bold\"\n                          )}\n                        >\n                          {player.name}\n                        </span>\n                        {player.isCurrentPlayer && (\n                          <Badge className=\"text-[9px]\">YOU</Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center gap-2\">\n                    <span\n                      className={cn(\n                        \"font-bold retro text-xs md:text-sm\",\n                        rankVariant === \"first\" && \"text-yellow-600\",\n                        rankVariant === \"second\" && \"text-gray-600\",\n                        rankVariant === \"third\" && \"text-amber-700\",\n                        player.isCurrentPlayer && \"text-primary\"\n                      )}\n                    >\n                      {formatScore(player.score)}\n                    </span>\n                  </div>\n                </div>\n              );\n            })\n          )}\n        </div>\n\n        <Separator />\n\n        {sortedPlayers.length > 0 && (\n          <div className=\"mt-4 pt-4\">\n            <p\n              className={cn(\"text-xs text-muted-foreground text-center retro\")}\n            >\n              Showing top {Math.min(sortedPlayers.length, maxPlayers)} players\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default Leaderboard;\n",
      "type": "registry:component",
      "target": "components/ui/8bit/leaderboard.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\n\n.retro {\n  font-family:\n    \"Press Start 2P\",\n    system-ui,\n    -apple-system,\n    sans-serif;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Card as ShadcnCard,\n  CardAction as ShadcnCardAction,\n  CardContent as ShadcnCardContent,\n  CardDescription as ShadcnCardDescription,\n  CardFooter as ShadcnCardFooter,\n  CardHeader as ShadcnCardHeader,\n  CardTitle as ShadcnCardTitle,\n} from \"@/components/ui/card\";\n\nimport \"./styles/retro.css\";\n\nexport const cardVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n});\n\nexport interface BitCardProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof cardVariants> {\n  asChild?: boolean;\n}\n\nfunction Card({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <div\n      className={cn(\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\n        className\n      )}\n    >\n      <ShadcnCard\n        {...props}\n        className={cn(\n          \"rounded-none border-0 !w-full\",\n          font !== \"normal\" && \"retro\",\n          className\n        )}\n      />\n\n      <div\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n}\n\nfunction CardHeader({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardHeader\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardTitle\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardDescription\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardAction\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardContent\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardFooter\n      data-slot=\"card-footer\"\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/avatar.tsx",
      "content": "import type React from \"react\";\nimport { forwardRef } from \"react\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"./styles/retro.css\";\n\nexport const avatarVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n    variant: {\n      default: \"\",\n      retro: \"\",\n      pixel: \"\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n    variant: \"pixel\",\n  },\n});\n\nconst Avatar = forwardRef<\n  React.ComponentRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {\n    font?: \"normal\" | \"retro\";\n    variant?: \"default\" | \"retro\" | \"pixel\";\n  }\n>(({ className = \"\", font, variant = \"pixel\", ...props }, ref) => {\n  const isPixel = variant === \"pixel\";\n\n  return (\n    <div className={cn(\"relative size-max\", className)}>\n      {/* Pixel frame (only show if pixel variant) */}\n      {isPixel && (\n        <div\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ zIndex: 10 }}\n        >\n          {/* Top black border */}\n          <div className=\"absolute top-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Second row */}\n          <div className=\"absolute top-[6.25%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Third row */}\n          <div className=\"absolute top-[12.5%] left-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\n          <div className=\"absolute top-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\n\n          {/* Fourth row */}\n          <div className=\"absolute top-[18.75%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[18.75%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Fifth row */}\n          <div className=\"absolute top-[25%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[25%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Rows 6-7 */}\n          <div className=\"absolute top-[31.25%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[31.25%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Rows 8-10 */}\n          <div className=\"absolute top-[43.75%] left-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[43.75%] right-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Rows 11-12 */}\n          <div className=\"absolute top-[62.5%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[62.5%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 13 */}\n          <div className=\"absolute top-[75%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[75%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 14 */}\n          <div className=\"absolute top-[81.25%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[81.25%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 15 */}\n          <div className=\"absolute top-[87.5%] left-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 16 */}\n          <div className=\"absolute top-[93.75%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Bottom row */}\n          <div className=\"absolute bottom-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n        </div>\n      )}\n\n      <AvatarPrimitive.Root\n        ref={ref}\n        data-slot=\"avatar\"\n        className={cn(\n          \"relative flex size-10 shrink-0 overflow-hidden text-xs\",\n          !isPixel && \"rounded-none\",\n          isPixel && \"rounded-full\",\n          font !== \"normal\" && \"retro\",\n          variant === \"retro\" && \"image-rendering-pixelated\",\n          className\n        )}\n        {...props}\n      />\n\n      {/* Original border styling (only show if not pixel variant) */}\n      {!isPixel && (\n        <>\n          <div className=\"absolute top-0 left-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute bottom-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute top-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute bottom-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute top-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute bottom-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n        </>\n      )}\n    </div>\n  );\n});\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\ninterface BitAvatarImageProps\n  extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> {\n  font?: \"normal\" | \"retro\";\n  variant?: \"default\" | \"retro\" | \"pixel\";\n}\n\nconst AvatarImage = forwardRef<\n  React.ComponentRef<typeof AvatarPrimitive.Image>,\n  BitAvatarImageProps\n>(({ className, font, ...props }, ref) => {\n  return (\n    <AvatarPrimitive.Image\n      ref={ref}\n      data-slot=\"avatar-image\"\n      className={cn(\n        \"aspect-square h-full w-full\",\n        font === \"retro\" && \"retro\",\n        className\n      )}\n      {...props}\n    />\n  );\n});\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = forwardRef<\n  React.ComponentRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    data-slot=\"avatar-fallback\"\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/avatar.tsx"
    },
    {
      "path": "components/ui/8bit/badge.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Badge as ShadcnBadge } from \"@/components/ui/badge\";\n\nexport const badgeVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n    variant: {\n      default: \"bg-primary border-primary\",\n      destructive: \"bg-destructive border-destructive\",\n      outline: \"bg-background border-background\",\n      secondary: \"bg-secondary border-secondary\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport interface BitButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n}\n\nfunction Badge({\n  children,\n  className = \"\",\n  font,\n  variant,\n  ...props\n}: BitButtonProps) {\n  const color = badgeVariants({ variant, font });\n\n  const classes = className.split(\" \");\n\n  // spacing-related Tailwind classes\n  const spacingClasses = classes.filter((c) =>\n    /^(m|p|mt|mr|mb|ml|mx|my|pt|pr|pb|pl|px|py|top|bottom|left|right|inset|inset-x|inset-y)-/.test(\n      c\n    )\n  );\n\n  // visual classes for badge and sidebars\n  const visualClasses = classes.filter(\n    (c) =>\n      c.startsWith(\"bg-\") ||\n      c.startsWith(\"border-\") ||\n      c.startsWith(\"text-\") ||\n      c.startsWith(\"rounded-\")\n  );\n\n  return (\n    <div className={cn(\"relative inline-flex\", spacingClasses)}>\n      <ShadcnBadge\n        {...props}\n        className={cn(\n          \"rounded-none\",\n          font !== \"normal\" && \"retro\",\n          visualClasses\n        )}\n        variant={variant}\n      >\n        {children}\n      </ShadcnBadge>\n\n      {/* Left pixel bar */}\n      <div\n        className={cn(\n          \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5\",\n          color,\n          visualClasses\n        )}\n      />\n      {/* Right pixel bar */}\n      <div\n        className={cn(\n          \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5\",\n          color,\n          visualClasses\n        )}\n      />\n    </div>\n  );\n}\n\nexport { Badge };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/badge.tsx"
    },
    {
      "path": "components/ui/8bit/separator.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction Separator({\n  className,\n  orientation = \"horizontal\",\n  decorative = true,\n  ...props\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\n  return (\n    <SeparatorPrimitive.Root\n      data-slot=\"separator-root\"\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"data-[orientation=horizontal]:bg-[length:16px_8px] data-[orientation=horizontal]:bg-[linear-gradient(90deg,var(--foreground)_75%,transparent_75%)] dark:data-[orientation=horizontal]:bg-[linear-gradient(90deg,var(--ring)_75%,transparent_75%)] shrink-0 data-[orientation=horizontal]:h-0.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-0.5 data-[orientation=vertical]:bg-[length:2px_16px] data-[orientation=vertical]:bg-[linear-gradient(0deg,var(--foreground)_75%,transparent_75%)] dark:data-[orientation=vertical]:bg-[linear-gradient(0deg,var(--ring)_75%,transparent_75%)]\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport { Separator };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/separator.tsx"
    }
  ]
}