{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "leaderboard",
  "type": "registry:component",
  "title": "8-bit Leaderboard",
  "description": "A retro-styled leaderboard component for displaying player rankings with avatars and scores.",
  "registryDependencies": [
    "card",
    "avatar",
    "badge",
    "separator"
  ],
  "files": [
    {
      "path": "components/ui/8bit/leaderboard.tsx",
      "content": "import * as React from \"react\";\r\n\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/components/ui/8bit/avatar\";\r\nimport { Badge } from \"@/components/ui/8bit/badge\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/8bit/card\";\r\nimport { Separator } from \"@/components/ui/8bit/separator\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport interface LeaderboardPlayer {\r\n  id: string;\r\n  name: string;\r\n  score: number;\r\n  rank?: number;\r\n  isCurrentPlayer?: boolean;\r\n  avatar?: string;\r\n  avatarFallback?: string;\r\n}\r\n\r\nexport interface LeaderboardProps extends React.ComponentProps<\"div\"> {\r\n  players: LeaderboardPlayer[];\r\n  maxPlayers?: number;\r\n  showRank?: boolean;\r\n  showAvatar?: boolean;\r\n  className?: string;\r\n  title?: string;\r\n  currentPlayerId?: string;\r\n}\r\n\r\nconst playerItemVariants = cva(\r\n  \"flex items-center justify-between p-3 rounded-lg transition-all duration-200\",\r\n  {\r\n    variants: {\r\n      rank: {\r\n        default: \"bg-muted/50 hover:bg-muted\",\r\n        first:\r\n          \"bg-gradient-to-r from-yellow-400/20 to-yellow-600/20 border-2 border-yellow-400 hover:from-yellow-400/30 hover:to-yellow-600/30\",\r\n        second:\r\n          \"bg-gradient-to-r from-gray-300/20 to-gray-500/20 border-2 border-gray-400 hover:from-gray-300/30 hover:to-gray-500/30\",\r\n        third:\r\n          \"bg-gradient-to-r from-amber-600/20 to-amber-800/20 border-2 border-amber-600 hover:from-amber-600/30 hover:to-amber-800/30\",\r\n        current: \"bg-primary/20 border-2 border-primary hover:bg-primary/30\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      rank: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nconst rankBadgeVariants = cva(\r\n  \"flex items-center justify-center size-8 text-sm font-bold\",\r\n  {\r\n    variants: {\r\n      rank: {\r\n        default: \"bg-muted text-muted-foreground\",\r\n        first:\r\n          \"bg-gradient-to-br from-yellow-400 to-yellow-600 text-yellow-900 shadow-lg\",\r\n        second:\r\n          \"bg-gradient-to-br from-gray-300 to-gray-500 text-gray-900 shadow-lg\",\r\n        third:\r\n          \"bg-gradient-to-br from-amber-600 to-amber-800 text-amber-100 shadow-lg\",\r\n        current: \"bg-primary text-primary-foreground\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      rank: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nfunction getRankVariant(\r\n  rank: number,\r\n  isCurrentPlayer: boolean\r\n): \"default\" | \"first\" | \"second\" | \"third\" | \"current\" {\r\n  if (isCurrentPlayer) return \"current\";\r\n  if (rank === 1) return \"first\";\r\n  if (rank === 2) return \"second\";\r\n  if (rank === 3) return \"third\";\r\n  return \"default\";\r\n}\r\n\r\nfunction formatScore(score: number): string {\r\n  return score.toLocaleString();\r\n}\r\n\r\nfunction getRankIcon(rank: number): string {\r\n  switch (rank) {\r\n    case 1:\r\n      return \"ðŸ¥‡\";\r\n    case 2:\r\n      return \"ðŸ¥ˆ\";\r\n    case 3:\r\n      return \"ðŸ¥‰\";\r\n    default:\r\n      return rank.toString();\r\n  }\r\n}\r\n\r\nexport function Leaderboard({\r\n  players,\r\n  maxPlayers = 10,\r\n  showRank = true,\r\n  showAvatar = true,\r\n  className,\r\n  title = \"LEADERBOARD\",\r\n  currentPlayerId,\r\n  ...props\r\n}: LeaderboardProps) {\r\n  // Sort players by score (descending) and assign ranks\r\n  const sortedPlayers = React.useMemo(() => {\r\n    return players\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, maxPlayers)\r\n      .map((player, index) => ({\r\n        ...player,\r\n        rank: index + 1,\r\n        isCurrentPlayer: currentPlayerId\r\n          ? player.id === currentPlayerId\r\n          : player.isCurrentPlayer,\r\n      }));\r\n  }, [players, maxPlayers, currentPlayerId]);\r\n\r\n  return (\r\n    <Card\r\n      data-slot=\"leaderboard\"\r\n      className={className}\r\n      font={\"retro\"}\r\n      {...props}\r\n    >\r\n      {title && (\r\n        <CardHeader>\r\n          <CardTitle className=\"text-center\">{title}</CardTitle>\r\n        </CardHeader>\r\n      )}\r\n\r\n      <CardContent className=\"space-y-5\">\r\n        <div className=\"space-y-2\">\r\n          {sortedPlayers.length === 0 ? (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <p className=\"retro text-sm\">No players yet</p>\r\n            </div>\r\n          ) : (\r\n            sortedPlayers.map((player) => {\r\n              const rankVariant = getRankVariant(\r\n                player.rank!,\r\n                player.isCurrentPlayer!\r\n              );\r\n\r\n              return (\r\n                <div\r\n                  key={player.id}\r\n                  className={cn(\r\n                    playerItemVariants({ rank: rankVariant }),\r\n                    \"retro\"\r\n                  )}\r\n                >\r\n                  <div className=\"flex items-center gap-3\">\r\n                    {showAvatar && (\r\n                      <Avatar variant=\"pixel\" font=\"retro\" className=\"size-10\">\r\n                        {player.avatar && (\r\n                          <AvatarImage src={player.avatar} alt={player.name} />\r\n                        )}\r\n                        <AvatarFallback className=\"retro text-xs\">\r\n                          {player.avatarFallback ||\r\n                            player.name.charAt(0).toUpperCase()}\r\n                        </AvatarFallback>\r\n                      </Avatar>\r\n                    )}\r\n\r\n                    {showRank && !showAvatar && (\r\n                      <div\r\n                        className={cn(rankBadgeVariants({ rank: rankVariant }))}\r\n                      >\r\n                        <span className=\"text-xs\">\r\n                          {getRankIcon(player.rank!)}\r\n                        </span>\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-center gap-4\">\r\n                        <span\r\n                          className={cn(\r\n                            \"font-medium truncate retro text-xs md:text-sm\",\r\n                            player.isCurrentPlayer && \"text-primary font-bold\"\r\n                          )}\r\n                        >\r\n                          {player.name}\r\n                        </span>\r\n                        {player.isCurrentPlayer && (\r\n                          <Badge className=\"text-[9px]\">YOU</Badge>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <span\r\n                      className={cn(\r\n                        \"font-bold retro text-xs md:text-sm\",\r\n                        rankVariant === \"first\" && \"text-yellow-600\",\r\n                        rankVariant === \"second\" && \"text-gray-600\",\r\n                        rankVariant === \"third\" && \"text-amber-700\",\r\n                        player.isCurrentPlayer && \"text-primary\"\r\n                      )}\r\n                    >\r\n                      {formatScore(player.score)}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n\r\n        <Separator />\r\n\r\n        {sortedPlayers.length > 0 && (\r\n          <div className=\"mt-4 pt-4\">\r\n            <p\r\n              className={cn(\"text-xs text-muted-foreground text-center retro\")}\r\n            >\r\n              Showing top {Math.min(sortedPlayers.length, maxPlayers)} players\r\n            </p>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default Leaderboard;\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/leaderboard.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\r\n\r\n.retro {\r\n  font-family:\r\n    \"Press Start 2P\",\r\n    system-ui,\r\n    -apple-system,\r\n    sans-serif;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Card as ShadcnCard,\r\n  CardAction as ShadcnCardAction,\r\n  CardContent as ShadcnCardContent,\r\n  CardDescription as ShadcnCardDescription,\r\n  CardFooter as ShadcnCardFooter,\r\n  CardHeader as ShadcnCardHeader,\r\n  CardTitle as ShadcnCardTitle,\r\n} from \"@/components/ui/card\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport const cardVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n  },\r\n});\r\n\r\nexport interface BitCardProps\r\n  extends React.ComponentProps<\"div\">,\r\n    VariantProps<typeof cardVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Card({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\r\n        className\r\n      )}\r\n    >\r\n      <ShadcnCard\r\n        {...props}\r\n        className={cn(\r\n          \"rounded-none border-0 !w-full\",\r\n          font !== \"normal\" && \"retro\",\r\n          className\r\n        )}\r\n      />\r\n\r\n      <div\r\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CardHeader({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardHeader\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardTitle({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardTitle\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardDescription({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardDescription\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardAction({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardAction\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardContent({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardContent\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardFooter({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardFooter\r\n      data-slot=\"card-footer\"\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardAction,\r\n  CardDescription,\r\n  CardContent,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/avatar.tsx",
      "content": "import type React from \"react\";\r\nimport { forwardRef } from \"react\";\r\n\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport const avatarVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n    variant: {\r\n      default: \"\",\r\n      retro: \"\",\r\n      pixel: \"\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n    variant: \"pixel\",\r\n  },\r\n});\r\n\r\nconst Avatar = forwardRef<\r\n  React.ComponentRef<typeof AvatarPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {\r\n    font?: \"normal\" | \"retro\";\r\n    variant?: \"default\" | \"retro\" | \"pixel\";\r\n  }\r\n>(({ className = \"\", font, variant = \"pixel\", ...props }, ref) => {\r\n  const isPixel = variant === \"pixel\";\r\n\r\n  return (\r\n    <div className={cn(\"relative size-max\", className)}>\r\n      {/* Pixel frame (only show if pixel variant) */}\r\n      {isPixel && (\r\n        <div\r\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\r\n          style={{ zIndex: 10 }}\r\n        >\r\n          {/* Top black border */}\r\n          <div className=\"absolute top-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Second row */}\r\n          <div className=\"absolute top-[6.25%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Third row */}\r\n          <div className=\"absolute top-[12.5%] left-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\r\n          <div className=\"absolute top-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\r\n\r\n          {/* Fourth row */}\r\n          <div className=\"absolute top-[18.75%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[18.75%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Fifth row */}\r\n          <div className=\"absolute top-[25%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[25%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Rows 6-7 */}\r\n          <div className=\"absolute top-[31.25%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[31.25%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Rows 8-10 */}\r\n          <div className=\"absolute top-[43.75%] left-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[43.75%] right-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Rows 11-12 */}\r\n          <div className=\"absolute top-[62.5%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[62.5%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 13 */}\r\n          <div className=\"absolute top-[75%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[75%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 14 */}\r\n          <div className=\"absolute top-[81.25%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[81.25%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 15 */}\r\n          <div className=\"absolute top-[87.5%] left-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 16 */}\r\n          <div className=\"absolute top-[93.75%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Bottom row */}\r\n          <div className=\"absolute bottom-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n        </div>\r\n      )}\r\n\r\n      <AvatarPrimitive.Root\r\n        ref={ref}\r\n        data-slot=\"avatar\"\r\n        className={cn(\r\n          \"relative flex size-10 shrink-0 overflow-hidden text-xs\",\r\n          !isPixel && \"rounded-none\",\r\n          isPixel && \"rounded-full\",\r\n          font !== \"normal\" && \"retro\",\r\n          variant === \"retro\" && \"image-rendering-pixelated\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n\r\n      {/* Original border styling (only show if not pixel variant) */}\r\n      {!isPixel && (\r\n        <>\r\n          <div className=\"absolute top-0 left-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute bottom-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute top-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute bottom-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute top-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute bottom-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\nAvatar.displayName = AvatarPrimitive.Root.displayName;\r\n\r\ninterface BitAvatarImageProps\r\n  extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> {\r\n  font?: \"normal\" | \"retro\";\r\n  variant?: \"default\" | \"retro\" | \"pixel\";\r\n}\r\n\r\nconst AvatarImage = forwardRef<\r\n  React.ComponentRef<typeof AvatarPrimitive.Image>,\r\n  BitAvatarImageProps\r\n>(({ className, font, ...props }, ref) => {\r\n  return (\r\n    <AvatarPrimitive.Image\r\n      ref={ref}\r\n      data-slot=\"avatar-image\"\r\n      className={cn(\r\n        \"aspect-square h-full w-full\",\r\n        font === \"retro\" && \"retro\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\r\n\r\nconst AvatarFallback = forwardRef<\r\n  React.ComponentRef<typeof AvatarPrimitive.Fallback>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Fallback\r\n    ref={ref}\r\n    data-slot=\"avatar-fallback\"\r\n    className={cn(\r\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\r\n\r\nexport { Avatar, AvatarImage, AvatarFallback };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/avatar.tsx"
    },
    {
      "path": "components/ui/8bit/badge.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { Badge as ShadcnBadge } from \"@/components/ui/badge\";\r\n\r\nexport const badgeVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n    variant: {\r\n      default: \"bg-primary border-primary\",\r\n      destructive: \"bg-destructive border-destructive\",\r\n      outline: \"bg-background border-background\",\r\n      secondary: \"bg-secondary border-secondary\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\nexport interface BitButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof badgeVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Badge({\r\n  children,\r\n  className = \"\",\r\n  font,\r\n  variant,\r\n  ...props\r\n}: BitButtonProps) {\r\n  const color = badgeVariants({ variant, font });\r\n\r\n  const classes = className.split(\" \");\r\n\r\n  // spacing-related Tailwind classes\r\n  const spacingClasses = classes.filter((c) =>\r\n    /^(m|p|mt|mr|mb|ml|mx|my|pt|pr|pb|pl|px|py|top|bottom|left|right|inset|inset-x|inset-y)-/.test(\r\n      c\r\n    )\r\n  );\r\n\r\n  // visual classes for badge and sidebars\r\n  const visualClasses = classes.filter(\r\n    (c) =>\r\n      c.startsWith(\"bg-\") ||\r\n      c.startsWith(\"border-\") ||\r\n      c.startsWith(\"text-\") ||\r\n      c.startsWith(\"rounded-\")\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"relative inline-flex\", spacingClasses)}>\r\n      <ShadcnBadge\r\n        {...props}\r\n        className={cn(\r\n          \"rounded-none\",\r\n          font !== \"normal\" && \"retro\",\r\n          visualClasses\r\n        )}\r\n        variant={variant}\r\n      >\r\n        {children}\r\n      </ShadcnBadge>\r\n\r\n      {/* Left pixel bar */}\r\n      <div\r\n        className={cn(\r\n          \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5\",\r\n          color,\r\n          visualClasses\r\n        )}\r\n      />\r\n      {/* Right pixel bar */}\r\n      <div\r\n        className={cn(\r\n          \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5\",\r\n          color,\r\n          visualClasses\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Badge };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/badge.tsx"
    },
    {
      "path": "components/ui/8bit/separator.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nfunction Separator({\r\n  className,\r\n  orientation = \"horizontal\",\r\n  decorative = true,\r\n  ...props\r\n}: React.ComponentProps<typeof SeparatorPrimitive.Root>) {\r\n  return (\r\n    <SeparatorPrimitive.Root\r\n      data-slot=\"separator-root\"\r\n      decorative={decorative}\r\n      orientation={orientation}\r\n      className={cn(\r\n        \"data-[orientation=horizontal]:bg-[length:16px_8px] data-[orientation=horizontal]:bg-[linear-gradient(90deg,var(--foreground)_75%,transparent_75%)] dark:data-[orientation=horizontal]:bg-[linear-gradient(90deg,var(--ring)_75%,transparent_75%)] shrink-0 data-[orientation=horizontal]:h-0.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-0.5 data-[orientation=vertical]:bg-[length:2px_16px] data-[orientation=vertical]:bg-[linear-gradient(0deg,var(--foreground)_75%,transparent_75%)] dark:data-[orientation=vertical]:bg-[linear-gradient(0deg,var(--ring)_75%,transparent_75%)]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { Separator };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/separator.tsx"
    }
  ]
}