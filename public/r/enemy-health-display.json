{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "enemy-health-display",
  "type": "registry:component",
  "title": "8-bit Enemy Health Display",
  "description": "A retro-styled enemy health display component with health bar, name, and level",
  "registryDependencies": [
    "health-bar"
  ],
  "files": [
    {
      "path": "components/ui/8bit/enemy-health-display.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport HealthBar from \"@/components/ui/8bit/health-bar\";\n\nimport \"./styles/retro.css\";\n\nexport const enemyHealthDisplayVariants = cva(\"\", {\n  variants: {\n    variant: {\n      default: \"\",\n      retro: \"retro\",\n    },\n    size: {\n      sm: \"text-xs\",\n      md: \"text-sm\",\n      lg: \"text-base\",\n    },\n    textColor: {\n      red: \"text-red-500\",\n      orange: \"text-orange-500\",\n      yellow: \"text-yellow-500\",\n      green: \"text-green-500\",\n      blue: \"text-blue-500\",\n      purple: \"text-purple-500\",\n    },\n  },\n  defaultVariants: {\n    variant: \"retro\",\n    size: \"md\",\n    textColor: \"red\",\n  },\n});\n\nexport interface EnemyHealthDisplayProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof enemyHealthDisplayVariants> {\n  enemyName: string;\n  level?: number;\n  currentHealth: number;\n  maxHealth: number;\n  showLevel?: boolean;\n  showHealthText?: boolean;\n  healthBarVariant?: \"retro\" | \"default\";\n  healthBarColor?: string;\n  enemyNameColor?: string;\n}\n\nexport default function EnemyHealthDisplay({\n  className,\n  variant,\n  size,\n  textColor,\n  enemyName,\n  level,\n  currentHealth,\n  maxHealth,\n  showLevel = true,\n  showHealthText = true,\n  healthBarVariant = \"retro\",\n  healthBarColor = \"bg-red-500\",\n  enemyNameColor = \"text-foreground\",\n  ...props\n}: EnemyHealthDisplayProps) {\n  const healthPercentage = Math.max(\n    0,\n    Math.min(100, (currentHealth / maxHealth) * 100)\n  );\n  const healthText = `${currentHealth}/${maxHealth}`;\n\n  return (\n    <div\n      className={cn(\n        \"relative w-full space-y-2\",\n        enemyHealthDisplayVariants({ variant, size, textColor }),\n        className\n      )}\n      {...props}\n    >\n      {/* Enemy Name and Level */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <span className={cn(\"font-bold\", enemyNameColor)}>{enemyName}</span>\n          {showLevel && level && (\n            <span className=\"text-muted-foreground\">Lv.{level}</span>\n          )}\n        </div>\n        {showHealthText && (\n          <span className=\"text-muted-foreground font-mono\">{healthText}</span>\n        )}\n      </div>\n\n      {/* Health Bar Container */}\n      <div className=\"relative\">\n        <HealthBar\n          value={healthPercentage}\n          variant={healthBarVariant}\n          className=\"w-full\"\n          props={{ progressBg: healthBarColor }}\n        />\n\n        {/* Health percentage overlay for retro variant */}\n        {healthBarVariant === \"retro\" && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"text-xs font-bold text-white drop-shadow-lg bg-black/50 px-1 rounded\">\n              {Math.round(healthPercentage)}%\n            </span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/enemy-health-display.tsx"
    },
    {
      "path": "components/ui/8bit/health-bar.tsx",
      "content": "import { BitProgressProps, Progress } from \"@/components/ui/8bit/progress\";\n\ninterface ManaBarProps extends React.ComponentProps<\"div\"> {\n  className?: string;\n  props?: BitProgressProps;\n  variant?: \"retro\" | \"default\";\n  value?: number;\n}\n\nexport default function HealthBar({\n  className,\n  variant,\n  value,\n  ...props\n}: ManaBarProps) {\n  return (\n    <Progress\n      {...props}\n      value={value}\n      variant={variant}\n      className={className}\n      progressBg=\"bg-red-500\"\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/health-bar.tsx"
    },
    {
      "path": "components/ui/8bit/progress.tsx",
      "content": "import * as ProgressPrimitive from \"@radix-ui/react-progress\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"./styles/retro.css\";\n\nexport const progressVariants = cva(\"\", {\n  variants: {\n    variant: {\n      default: \"\",\n      retro: \"retro\",\n    },\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n});\n\nexport interface BitProgressProps\n  extends React.ComponentProps<typeof ProgressPrimitive.Root>,\n    VariantProps<typeof progressVariants> {\n  className?: string;\n  font?: VariantProps<typeof progressVariants>[\"font\"];\n  progressBg?: string;\n}\n\nfunction Progress({\n  className,\n  font,\n  variant,\n  value,\n  progressBg,\n  ...props\n}: BitProgressProps) {\n  return (\n    <div className={cn(\"relative w-full\", className)}>\n      <ProgressPrimitive.Root\n        data-slot=\"progress\"\n        className={cn(\n          \"bg-primary/20 relative h-2 w-full overflow-hidden\",\n          font !== \"normal\" && \"retro\"\n        )}\n        {...props}\n      >\n        <ProgressPrimitive.Indicator\n          data-slot=\"progress-indicator\"\n          className={cn(\n            \"h-full transition-all\",\n            variant === \"retro\" ? \"flex\" : \"w-full flex-1\",\n            progressBg && variant !== \"retro\" ? progressBg : \"bg-primary\"\n          )}\n          style={\n            variant === \"retro\"\n              ? undefined\n              : { transform: `translateX(-${100 - (value || 0)}%)` }\n          }\n        >\n          {variant === \"retro\" && (\n            <div className=\"flex w-full\">\n              {Array.from({ length: 20 }).map((_, i) => {\n                const filledSquares = Math.round(((value || 0) / 100) * 20);\n                return (\n                  <div\n                    key={i}\n                    className={cn(\n                      \"size-2 mx-[1px] w-full\",\n                      i < filledSquares ? progressBg : \"bg-transparent\"\n                    )}\n                  />\n                );\n              })}\n            </div>\n          )}\n        </ProgressPrimitive.Indicator>\n      </ProgressPrimitive.Root>\n\n      <div\n        className=\"absolute inset-0 border-y-4 -my-1 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n\n      <div\n        className=\"absolute inset-0 border-x-4 -mx-1 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n}\n\nexport { Progress };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/progress.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\n\n.retro {\n  font-family:\n    \"Press Start 2P\",\n    system-ui,\n    -apple-system,\n    sans-serif;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}