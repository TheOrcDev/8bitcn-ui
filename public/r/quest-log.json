{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quest-log",
  "type": "registry:component",
  "title": "8-bit Quest Log",
  "description": "A retro-styled quest log component for tracking game missions and tasks with accordion functionality and status indicators.",
  "registryDependencies": [
    "accordion",
    "card",
    "badge",
    "scroll-area"
  ],
  "files": [
    {
      "path": "components/ui/8bit/quest-log.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/8bit/accordion\";\r\nimport { Badge } from \"@/components/ui/8bit/badge\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/8bit/card\";\r\nimport { ScrollArea } from \"@/components/ui/8bit/scroll-area\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport type QuestStatus = \"active\" | \"completed\" | \"failed\" | \"pending\";\r\n\r\nexport interface Quest {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: QuestStatus;\r\n  shortDescription?: string;\r\n}\r\n\r\nexport interface QuestLogProps {\r\n  quests: Quest[];\r\n  className?: string;\r\n  maxHeight?: string;\r\n  showEmptyState?: boolean;\r\n  emptyStateMessage?: string;\r\n}\r\n\r\nconst getStatusBadgeVariant = (status: QuestStatus) => {\r\n  switch (status) {\r\n    case \"active\":\r\n      return \"default\";\r\n    case \"completed\":\r\n      return \"secondary\";\r\n    case \"failed\":\r\n      return \"destructive\";\r\n    case \"pending\":\r\n      return \"outline\";\r\n    default:\r\n      return \"outline\";\r\n  }\r\n};\r\n\r\nfunction QuestItem({ quest }: { quest: Quest }) {\r\n  const shortDescription =\r\n    quest.shortDescription ||\r\n    (quest.description.length > 100\r\n      ? `${quest.description.substring(0, 100)}...`\r\n      : quest.description);\r\n\r\n  return (\r\n    <AccordionItem\r\n      className=\"border-b-2 border-foreground dark:border-ring\"\r\n      value={quest.id}\r\n    >\r\n      <AccordionTrigger className=\"hover:no-underline py-3 px-4\">\r\n        <div className=\"flex items-center gap-3 w-full\">\r\n          <div className=\"flex-1 text-left\">\r\n            <div className=\"flex flex-col sm:flex-row items-center justify-between sm:pr-10 gap-3\">\r\n              <div className=\"flex flex-col gap-1\">\r\n                <h3 className=\"text-sm font-medium text-center sm:text-left\">\r\n                  {quest.title}\r\n                </h3>\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  {shortDescription}\r\n                </p>\r\n              </div>\r\n\r\n              <Badge\r\n                variant={getStatusBadgeVariant(quest.status)}\r\n                className=\"text-[9px]\"\r\n              >\r\n                {quest.status.toUpperCase()}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </AccordionTrigger>\r\n      <AccordionContent className=\"px-4 pb-3\">\r\n        <div className=\"pt-2\">\r\n          <p className=\"text-xs text-muted-foreground leading-relaxed\">\r\n            {quest.description}\r\n          </p>\r\n        </div>\r\n      </AccordionContent>\r\n    </AccordionItem>\r\n  );\r\n}\r\n\r\nfunction EmptyState({ message }: { message: string }) {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center px-4 text-center\">\r\n      <p className=\"text-sm text-muted-foreground\">{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function QuestLog({\r\n  quests,\r\n  className,\r\n  showEmptyState = true,\r\n  emptyStateMessage = \"No quests available.\",\r\n}: QuestLogProps) {\r\n  const activeQuests = quests.filter((quest) => quest.status === \"active\");\r\n  const sortedQuests = [\r\n    ...activeQuests,\r\n    ...quests.filter((quest) => quest.status !== \"active\"),\r\n  ];\r\n\r\n  return (\r\n    <Card className={cn(\"w-full\", className)}>\r\n      <CardHeader className=\"pb-3\">\r\n        <CardTitle className=\"flex items-center gap-2 text-base justify-between\">\r\n          Quest Log\r\n          {activeQuests.length > 0 && (\r\n            <Badge variant=\"default\" className=\"ml-2\">\r\n              {activeQuests.length} Active\r\n            </Badge>\r\n          )}\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"p-0\">\r\n        {quests.length === 0 && showEmptyState ? (\r\n          <EmptyState message={emptyStateMessage} />\r\n        ) : (\r\n          <ScrollArea className=\"w-full h-[400px]\">\r\n            <Accordion type=\"multiple\" className=\"w-full\">\r\n              {sortedQuests.map((quest) => (\r\n                <QuestItem key={quest.id} quest={quest} />\r\n              ))}\r\n            </Accordion>\r\n          </ScrollArea>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default QuestLog;\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/quest-log.tsx"
    },
    {
      "path": "components/ui/8bit/accordion.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\n\r\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Accordion as ShadcnAccordion,\r\n  AccordionContent as ShadcnAccordionContent,\r\n  AccordionItem as ShadcnAccordionItem,\r\n  AccordionTrigger as ShadcnAccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport interface BitAccordionItemProps\r\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction AccordionItem({\r\n  className,\r\n  children,\r\n  ...props\r\n}: BitAccordionItemProps) {\r\n  return (\r\n    <ShadcnAccordionItem\r\n      className={cn(\r\n        \"border-dashed border-b-4 border-foreground dark:border-ring relative\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </ShadcnAccordionItem>\r\n  );\r\n}\r\n\r\nexport interface BitAccordionTriggerProps\r\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> {\r\n  font?: \"normal\" | \"retro\";\r\n}\r\n\r\nfunction AccordionTrigger({\r\n  className,\r\n  children,\r\n  font,\r\n  ...props\r\n}: BitAccordionTriggerProps) {\r\n  return (\r\n    <ShadcnAccordionTrigger\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </ShadcnAccordionTrigger>\r\n  );\r\n}\r\n\r\nexport interface BitAccordionContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> {\r\n  font?: \"normal\" | \"retro\";\r\n}\r\n\r\nfunction AccordionContent({\r\n  className,\r\n  children,\r\n  font,\r\n  ...props\r\n}: BitAccordionContentProps) {\r\n  return (\r\n    <div className=\"relative\">\r\n      <ShadcnAccordionContent\r\n        className={cn(\r\n          \"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\r\n          font !== \"normal\" && \"retro\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <div className=\"pb-4 pt-0 relative z-10 p-1\">{children}</div>\r\n      </ShadcnAccordionContent>\r\n\r\n      <AccordionPrimitive.Content asChild forceMount />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Accordion = ShadcnAccordion;\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/accordion.tsx"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Card as ShadcnCard,\r\n  CardAction as ShadcnCardAction,\r\n  CardContent as ShadcnCardContent,\r\n  CardDescription as ShadcnCardDescription,\r\n  CardFooter as ShadcnCardFooter,\r\n  CardHeader as ShadcnCardHeader,\r\n  CardTitle as ShadcnCardTitle,\r\n} from \"@/components/ui/card\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport const cardVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n  },\r\n});\r\n\r\nexport interface BitCardProps\r\n  extends React.ComponentProps<\"div\">,\r\n    VariantProps<typeof cardVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Card({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\r\n        className\r\n      )}\r\n    >\r\n      <ShadcnCard\r\n        {...props}\r\n        className={cn(\r\n          \"rounded-none border-0 !w-full\",\r\n          font !== \"normal\" && \"retro\",\r\n          className\r\n        )}\r\n      />\r\n\r\n      <div\r\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CardHeader({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardHeader\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardTitle({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardTitle\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardDescription({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardDescription\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardAction({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardAction\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardContent({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardContent\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardFooter({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardFooter\r\n      data-slot=\"card-footer\"\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardAction,\r\n  CardDescription,\r\n  CardContent,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/badge.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { Badge as ShadcnBadge } from \"@/components/ui/badge\";\r\n\r\nexport const badgeVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n    variant: {\r\n      default: \"bg-primary border-primary\",\r\n      destructive: \"bg-destructive border-destructive\",\r\n      outline: \"bg-background border-background\",\r\n      secondary: \"bg-secondary border-secondary\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\nexport interface BitButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof badgeVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Badge({\r\n  children,\r\n  className = \"\",\r\n  font,\r\n  variant,\r\n  ...props\r\n}: BitButtonProps) {\r\n  const color = badgeVariants({ variant, font });\r\n\r\n  const classes = className.split(\" \");\r\n\r\n  // spacing-related Tailwind classes\r\n  const spacingClasses = classes.filter((c) =>\r\n    /^(m|p|mt|mr|mb|ml|mx|my|pt|pr|pb|pl|px|py|top|bottom|left|right|inset|inset-x|inset-y)-/.test(\r\n      c\r\n    )\r\n  );\r\n\r\n  // visual classes for badge and sidebars\r\n  const visualClasses = classes.filter(\r\n    (c) =>\r\n      c.startsWith(\"bg-\") ||\r\n      c.startsWith(\"border-\") ||\r\n      c.startsWith(\"text-\") ||\r\n      c.startsWith(\"rounded-\")\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"relative inline-flex\", spacingClasses)}>\r\n      <ShadcnBadge\r\n        {...props}\r\n        className={cn(\r\n          \"rounded-none\",\r\n          font !== \"normal\" && \"retro\",\r\n          visualClasses\r\n        )}\r\n        variant={variant}\r\n      >\r\n        {children}\r\n      </ShadcnBadge>\r\n\r\n      {/* Left pixel bar */}\r\n      <div\r\n        className={cn(\r\n          \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5\",\r\n          color,\r\n          visualClasses\r\n        )}\r\n      />\r\n      {/* Right pixel bar */}\r\n      <div\r\n        className={cn(\r\n          \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5\",\r\n          color,\r\n          visualClasses\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Badge };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/badge.tsx"
    },
    {
      "path": "components/ui/8bit/scroll-area.tsx",
      "content": "import * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nfunction ScrollArea({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\r\n  return (\r\n    <ScrollAreaPrimitive.Root\r\n      data-slot=\"scroll-area\"\r\n      className={cn(\"relative\", className)}\r\n      {...props}\r\n    >\r\n      <ScrollAreaPrimitive.Viewport\r\n        data-slot=\"scroll-area-viewport\"\r\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\r\n      >\r\n        {children}\r\n      </ScrollAreaPrimitive.Viewport>\r\n      <ScrollBar />\r\n      <ScrollAreaPrimitive.Corner />\r\n    </ScrollAreaPrimitive.Root>\r\n  );\r\n}\r\n\r\nfunction ScrollBar({\r\n  className,\r\n  orientation = \"vertical\",\r\n  ...props\r\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\r\n  return (\r\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\r\n      data-slot=\"scroll-area-scrollbar\"\r\n      orientation={orientation}\r\n      className={cn(\r\n        \"flex touch-none p-px transition-colors select-none bg-foreground/30 dark:bg-ring/30 relative\",\r\n        orientation === \"vertical\" &&\r\n          \"h-full w-1.5 border-l border-l-transparent\",\r\n        orientation === \"horizontal\" &&\r\n          \"h-1.5 flex-col border-t border-t-transparent\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <ScrollAreaPrimitive.ScrollAreaThumb\r\n        data-slot=\"scroll-area-thumb\"\r\n        className={cn(\r\n          \"relative dark:bg-ring rounded-none  flex-1 bg-foreground transition-none duration-75\",\r\n          orientation === \"vertical\" && \"scale-x-250 \",\r\n          orientation === \"horizontal\" && \"scale-y-250 \"\r\n        )}\r\n      />\r\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\r\n  );\r\n}\r\n\r\nexport { ScrollArea, ScrollBar };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/scroll-area.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\r\n\r\n.retro {\r\n  font-family:\r\n    \"Press Start 2P\",\r\n    system-ui,\r\n    -apple-system,\r\n    sans-serif;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}