{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "quest-log",
  "type": "registry:component",
  "title": "8-bit Quest Log",
  "description": "A retro-styled quest log component for tracking game missions and tasks with accordion functionality and status indicators.",
  "registryDependencies": [
    "accordion",
    "card",
    "badge",
    "scroll-area"
  ],
  "files": [
    {
      "path": "components/ui/8bit/quest-log.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/8bit/accordion\";\nimport { Badge } from \"@/components/ui/8bit/badge\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/8bit/card\";\nimport { ScrollArea } from \"@/components/ui/8bit/scroll-area\";\n\nimport \"./styles/retro.css\";\n\nexport type QuestStatus = \"active\" | \"completed\" | \"failed\" | \"pending\";\n\nexport interface Quest {\n  id: string;\n  title: string;\n  description: string;\n  status: QuestStatus;\n  shortDescription?: string;\n}\n\nexport interface QuestLogProps {\n  quests: Quest[];\n  className?: string;\n  maxHeight?: string;\n  showEmptyState?: boolean;\n  emptyStateMessage?: string;\n}\n\nconst getStatusBadgeVariant = (status: QuestStatus) => {\n  switch (status) {\n    case \"active\":\n      return \"default\";\n    case \"completed\":\n      return \"secondary\";\n    case \"failed\":\n      return \"destructive\";\n    case \"pending\":\n      return \"outline\";\n    default:\n      return \"outline\";\n  }\n};\n\nfunction QuestItem({ quest }: { quest: Quest }) {\n  const shortDescription =\n    quest.shortDescription ||\n    (quest.description.length > 100\n      ? `${quest.description.substring(0, 100)}...`\n      : quest.description);\n\n  return (\n    <AccordionItem\n      className=\"border-b-2 border-foreground dark:border-ring\"\n      value={quest.id}\n    >\n      <AccordionTrigger className=\"hover:no-underline py-3 px-4\">\n        <div className=\"flex items-center gap-3 w-full\">\n          <div className=\"flex-1 text-left\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between sm:pr-10 gap-3\">\n              <div className=\"flex flex-col gap-1\">\n                <h3 className=\"text-sm font-medium text-center sm:text-left\">\n                  {quest.title}\n                </h3>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {shortDescription}\n                </p>\n              </div>\n\n              <Badge\n                variant={getStatusBadgeVariant(quest.status)}\n                className=\"text-[9px]\"\n              >\n                {quest.status.toUpperCase()}\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </AccordionTrigger>\n      <AccordionContent className=\"px-4 pb-3\">\n        <div className=\"pt-2\">\n          <p className=\"text-xs text-muted-foreground leading-relaxed\">\n            {quest.description}\n          </p>\n        </div>\n      </AccordionContent>\n    </AccordionItem>\n  );\n}\n\nfunction EmptyState({ message }: { message: string }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center px-4 text-center\">\n      <p className=\"text-sm text-muted-foreground\">{message}</p>\n    </div>\n  );\n}\n\nexport function QuestLog({\n  quests,\n  className,\n  showEmptyState = true,\n  emptyStateMessage = \"No quests available.\",\n}: QuestLogProps) {\n  const activeQuests = quests.filter((quest) => quest.status === \"active\");\n  const sortedQuests = [\n    ...activeQuests,\n    ...quests.filter((quest) => quest.status !== \"active\"),\n  ];\n\n  return (\n    <Card className={cn(\"w-full\", className)}>\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center gap-2 text-base justify-between\">\n          Quest Log\n          {activeQuests.length > 0 && (\n            <Badge variant=\"default\" className=\"ml-2\">\n              {activeQuests.length} Active\n            </Badge>\n          )}\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {quests.length === 0 && showEmptyState ? (\n          <EmptyState message={emptyStateMessage} />\n        ) : (\n          <ScrollArea className=\"w-full h-[400px]\">\n            <Accordion type=\"multiple\" className=\"w-full\">\n              {sortedQuests.map((quest) => (\n                <QuestItem key={quest.id} quest={quest} />\n              ))}\n            </Accordion>\n          </ScrollArea>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default QuestLog;\n",
      "type": "registry:component",
      "target": "components/ui/8bit/quest-log.tsx"
    },
    {
      "path": "components/ui/8bit/accordion.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\n\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Accordion as ShadcnAccordion,\n  AccordionContent as ShadcnAccordionContent,\n  AccordionItem as ShadcnAccordionItem,\n  AccordionTrigger as ShadcnAccordionTrigger,\n} from \"@/components/ui/accordion\";\n\nimport \"./styles/retro.css\";\n\nexport interface BitAccordionItemProps\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item> {\n  asChild?: boolean;\n}\n\nfunction AccordionItem({\n  className,\n  children,\n  ...props\n}: BitAccordionItemProps) {\n  return (\n    <ShadcnAccordionItem\n      className={cn(\n        \"border-dashed border-b-4 border-foreground dark:border-ring relative\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ShadcnAccordionItem>\n  );\n}\n\nexport interface BitAccordionTriggerProps\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> {\n  font?: \"normal\" | \"retro\";\n}\n\nfunction AccordionTrigger({\n  className,\n  children,\n  font,\n  ...props\n}: BitAccordionTriggerProps) {\n  return (\n    <ShadcnAccordionTrigger\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    >\n      {children}\n    </ShadcnAccordionTrigger>\n  );\n}\n\nexport interface BitAccordionContentProps\n  extends React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content> {\n  font?: \"normal\" | \"retro\";\n}\n\nfunction AccordionContent({\n  className,\n  children,\n  font,\n  ...props\n}: BitAccordionContentProps) {\n  return (\n    <div className=\"relative\">\n      <ShadcnAccordionContent\n        className={cn(\n          \"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\",\n          font !== \"normal\" && \"retro\",\n          className\n        )}\n        {...props}\n      >\n        <div className=\"pb-4 pt-0 relative z-10 p-1\">{children}</div>\n      </ShadcnAccordionContent>\n\n      <AccordionPrimitive.Content asChild forceMount />\n    </div>\n  );\n}\n\nconst Accordion = ShadcnAccordion;\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/accordion.tsx"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Card as ShadcnCard,\n  CardAction as ShadcnCardAction,\n  CardContent as ShadcnCardContent,\n  CardDescription as ShadcnCardDescription,\n  CardFooter as ShadcnCardFooter,\n  CardHeader as ShadcnCardHeader,\n  CardTitle as ShadcnCardTitle,\n} from \"@/components/ui/card\";\n\nimport \"./styles/retro.css\";\n\nexport const cardVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n});\n\nexport interface BitCardProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof cardVariants> {\n  asChild?: boolean;\n}\n\nfunction Card({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <div\n      className={cn(\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\n        className\n      )}\n    >\n      <ShadcnCard\n        {...props}\n        className={cn(\n          \"rounded-none border-0 !w-full\",\n          font !== \"normal\" && \"retro\",\n          className\n        )}\n      />\n\n      <div\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n}\n\nfunction CardHeader({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardHeader\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardTitle\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardDescription\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardAction\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardContent\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardFooter\n      data-slot=\"card-footer\"\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/badge.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Badge as ShadcnBadge } from \"@/components/ui/badge\";\n\nexport const badgeVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n    variant: {\n      default: \"bg-primary border-primary\",\n      destructive: \"bg-destructive border-destructive\",\n      outline: \"bg-background border-background\",\n      secondary: \"bg-secondary border-secondary\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport interface BitButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n}\n\nfunction Badge({\n  children,\n  className = \"\",\n  font,\n  variant,\n  ...props\n}: BitButtonProps) {\n  const color = badgeVariants({ variant, font });\n\n  const classes = className.split(\" \");\n\n  // spacing-related Tailwind classes\n  const spacingClasses = classes.filter((c) =>\n    /^(m|p|mt|mr|mb|ml|mx|my|pt|pr|pb|pl|px|py|top|bottom|left|right|inset|inset-x|inset-y)-/.test(\n      c\n    )\n  );\n\n  // visual classes for badge and sidebars\n  const visualClasses = classes.filter(\n    (c) =>\n      c.startsWith(\"bg-\") ||\n      c.startsWith(\"border-\") ||\n      c.startsWith(\"text-\") ||\n      c.startsWith(\"rounded-\")\n  );\n\n  return (\n    <div className={cn(\"relative inline-flex\", spacingClasses)}>\n      <ShadcnBadge\n        {...props}\n        className={cn(\n          \"rounded-none\",\n          font !== \"normal\" && \"retro\",\n          visualClasses\n        )}\n        variant={variant}\n      >\n        {children}\n      </ShadcnBadge>\n\n      {/* Left pixel bar */}\n      <div\n        className={cn(\n          \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5\",\n          color,\n          visualClasses\n        )}\n      />\n      {/* Right pixel bar */}\n      <div\n        className={cn(\n          \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5\",\n          color,\n          visualClasses\n        )}\n      />\n    </div>\n  );\n}\n\nexport { Badge };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/badge.tsx"
    },
    {
      "path": "components/ui/8bit/scroll-area.tsx",
      "content": "import * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\";\n\nimport { cn } from \"@/lib/utils\";\n\nfunction ScrollArea({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {\n  return (\n    <ScrollAreaPrimitive.Root\n      data-slot=\"scroll-area\"\n      className={cn(\"relative\", className)}\n      {...props}\n    >\n      <ScrollAreaPrimitive.Viewport\n        data-slot=\"scroll-area-viewport\"\n        className=\"focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1\"\n      >\n        {children}\n      </ScrollAreaPrimitive.Viewport>\n      <ScrollBar />\n      <ScrollAreaPrimitive.Corner />\n    </ScrollAreaPrimitive.Root>\n  );\n}\n\nfunction ScrollBar({\n  className,\n  orientation = \"vertical\",\n  ...props\n}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {\n  return (\n    <ScrollAreaPrimitive.ScrollAreaScrollbar\n      data-slot=\"scroll-area-scrollbar\"\n      orientation={orientation}\n      className={cn(\n        \"flex touch-none p-px transition-colors select-none bg-foreground/30 dark:bg-ring/30 relative\",\n        orientation === \"vertical\" &&\n          \"h-full w-1.5 border-l border-l-transparent\",\n        orientation === \"horizontal\" &&\n          \"h-1.5 flex-col border-t border-t-transparent\",\n        className\n      )}\n      {...props}\n    >\n      <ScrollAreaPrimitive.ScrollAreaThumb\n        data-slot=\"scroll-area-thumb\"\n        className={cn(\n          \"relative dark:bg-ring rounded-none  flex-1 bg-foreground transition-none duration-75\",\n          orientation === \"vertical\" && \"scale-x-250 \",\n          orientation === \"horizontal\" && \"scale-y-250 \"\n        )}\n      />\n    </ScrollAreaPrimitive.ScrollAreaScrollbar>\n  );\n}\n\nexport { ScrollArea, ScrollBar };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/scroll-area.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\n\n.retro {\n  font-family:\n    \"Press Start 2P\",\n    system-ui,\n    -apple-system,\n    sans-serif;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}