{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "player-profile-card",
  "type": "registry:component",
  "title": "8-bit Player Profile Card",
  "description": "A comprehensive player profile card component with stats, health/mana bars, and custom stats support.",
  "registryDependencies": [
    "card",
    "avatar",
    "badge",
    "progress"
  ],
  "files": [
    {
      "path": "components/ui/8bit/blocks/player-profile-card.tsx",
      "content": "import React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/ui/8bit/avatar\";\nimport { Badge } from \"@/components/ui/8bit/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/8bit/card\";\nimport HealthBar from \"@/components/ui/8bit/health-bar\";\nimport ManaBar from \"@/components/ui/8bit/mana-bar\";\nimport { Progress } from \"@/components/ui/8bit/progress\";\nimport \"@/components/ui/8bit/styles/retro.css\";\n\nexport interface PlayerStats {\n  health?: {\n    current: number;\n    max: number;\n  };\n  mana?: {\n    current: number;\n    max: number;\n  };\n  experience?: {\n    current: number;\n    max: number;\n  };\n  level?: number;\n  [key: string]: unknown; // Allow custom stats\n}\n\nexport interface PlayerProfileCardProps {\n  className?: string;\n  playerName: string;\n  avatarSrc?: string;\n  avatarFallback?: string;\n  level?: number;\n  stats?: PlayerStats;\n  playerClass?: string;\n  showLevel?: boolean;\n  showHealth?: boolean;\n  showMana?: boolean;\n  showExperience?: boolean;\n  customStats?: Array<{\n    label: string;\n    value: number;\n    max?: number;\n    color?: string;\n    variant?: \"retro\" | \"default\";\n  }>;\n}\n\nexport default function PlayerProfileCard({\n  className,\n  playerName,\n  avatarSrc,\n  avatarFallback,\n  level = 1,\n  stats,\n  playerClass,\n  showLevel = true,\n  showHealth = true,\n  showMana = true,\n  showExperience = true,\n  customStats = [],\n  ...props\n}: PlayerProfileCardProps) {\n  const healthPercentage = stats?.health\n    ? Math.round((stats.health.current / stats.health.max) * 100)\n    : 0;\n\n  const manaPercentage = stats?.mana\n    ? Math.round((stats.mana.current / stats.mana.max) * 100)\n    : 0;\n\n  const experiencePercentage = stats?.experience\n    ? Math.round((stats.experience.current / stats.experience.max) * 100)\n    : 0;\n\n  return (\n    <Card className={cn(\"w-full max-w-md\", className)} {...props}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center gap-4\">\n          <Avatar className=\"size-16\" variant=\"pixel\" font=\"retro\">\n            <AvatarImage src={avatarSrc} alt={playerName} />\n            <AvatarFallback className=\"text-lg\">\n              {avatarFallback || playerName.charAt(0).toUpperCase()}\n            </AvatarFallback>\n          </Avatar>\n\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"space-y-2\">\n              <div className=\"flex flex-col gap-1 md:flex-row md:items-center md:gap-2 justify-between\">\n                <h3 className=\"font-bold truncate md:text-lg\">{playerName}</h3>\n                {showLevel && (\n                  <span>\n                    <Badge className=\"text-xs\">Lv.{level}</Badge>\n                  </span>\n                )}\n              </div>\n              <div className=\"flex flex-wrap gap-1\">\n                {playerClass && (\n                  <span className=\"text-xs text-muted-foreground\">\n                    {playerClass}\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Health Bar */}\n        {showHealth && stats?.health && (\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">Health</span>\n              <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\n                {stats.health.current}/{stats.health.max}\n              </span>\n            </div>\n            <HealthBar\n              value={healthPercentage}\n              variant=\"retro\"\n              className=\"h-3\"\n            />\n          </div>\n        )}\n\n        {/* Mana Bar */}\n        {showMana && stats?.mana && (\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">Mana</span>\n              <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\n                {stats.mana.current}/{stats.mana.max}\n              </span>\n            </div>\n            <ManaBar value={manaPercentage} variant=\"retro\" className=\"h-3\" />\n          </div>\n        )}\n\n        {/* Experience Bar */}\n        {showExperience && stats?.experience && (\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm font-medium\">Experience</span>\n              <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\n                {stats.experience.current}/{stats.experience.max} XP\n              </span>\n            </div>\n            <Progress\n              value={experiencePercentage}\n              variant=\"retro\"\n              progressBg=\"bg-yellow-500\"\n              className=\"h-3\"\n            />\n          </div>\n        )}\n\n        {/* Custom Stats */}\n        {customStats.length > 0 && (\n          <div className=\"space-y-2\">\n            {customStats.map((stat, index) => {\n              const percentage = stat.max\n                ? Math.round((stat.value / stat.max) * 100)\n                : 0;\n\n              return (\n                <div key={index} className=\"space-y-1\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">{stat.label}</span>\n                    <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\n                      {stat.value}\n                      {stat.max ? `/${stat.max}` : \"\"}\n                    </span>\n                  </div>\n                  <Progress\n                    value={percentage}\n                    variant={stat.variant || \"retro\"}\n                    progressBg={stat.color || \"bg-primary\"}\n                    className=\"h-3\"\n                  />\n                </div>\n              );\n            })}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/blocks/player-profile-card.tsx"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport {\n  Card as ShadcnCard,\n  CardAction as ShadcnCardAction,\n  CardContent as ShadcnCardContent,\n  CardDescription as ShadcnCardDescription,\n  CardFooter as ShadcnCardFooter,\n  CardHeader as ShadcnCardHeader,\n  CardTitle as ShadcnCardTitle,\n} from \"@/components/ui/card\";\n\nimport \"./styles/retro.css\";\n\nexport const cardVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n});\n\nexport interface BitCardProps\n  extends React.ComponentProps<\"div\">,\n    VariantProps<typeof cardVariants> {\n  asChild?: boolean;\n}\n\nfunction Card({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <div\n      className={cn(\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\n        className\n      )}\n    >\n      <ShadcnCard\n        {...props}\n        className={cn(\n          \"rounded-none border-0 !w-full\",\n          font !== \"normal\" && \"retro\",\n          className\n        )}\n      />\n\n      <div\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n}\n\nfunction CardHeader({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardHeader\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardTitle({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardTitle\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardDescription({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardDescription\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardAction({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardAction\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardContent({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardContent\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nfunction CardFooter({ ...props }: BitCardProps) {\n  const { className, font } = props;\n\n  return (\n    <ShadcnCardFooter\n      data-slot=\"card-footer\"\n      className={cn(font !== \"normal\" && \"retro\", className)}\n      {...props}\n    />\n  );\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n};\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/avatar.tsx",
      "content": "import type React from \"react\";\nimport { forwardRef } from \"react\";\n\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"./styles/retro.css\";\n\nexport const avatarVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n    variant: {\n      default: \"\",\n      retro: \"\",\n      pixel: \"\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n    variant: \"pixel\",\n  },\n});\n\nconst Avatar = forwardRef<\n  React.ComponentRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {\n    font?: \"normal\" | \"retro\";\n    variant?: \"default\" | \"retro\" | \"pixel\";\n  }\n>(({ className = \"\", font, variant = \"pixel\", ...props }, ref) => {\n  const isPixel = variant === \"pixel\";\n\n  return (\n    <div className={cn(\"relative size-max\", className)}>\n      {/* Pixel frame (only show if pixel variant) */}\n      {isPixel && (\n        <div\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\n          style={{ zIndex: 10 }}\n        >\n          {/* Top black border */}\n          <div className=\"absolute top-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Second row */}\n          <div className=\"absolute top-[6.25%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Third row */}\n          <div className=\"absolute top-[12.5%] left-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\n          <div className=\"absolute top-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\n\n          {/* Fourth row */}\n          <div className=\"absolute top-[18.75%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[18.75%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Fifth row */}\n          <div className=\"absolute top-[25%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[25%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Rows 6-7 */}\n          <div className=\"absolute top-[31.25%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[31.25%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Rows 8-10 */}\n          <div className=\"absolute top-[43.75%] left-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[43.75%] right-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Rows 11-12 */}\n          <div className=\"absolute top-[62.5%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[62.5%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 13 */}\n          <div className=\"absolute top-[75%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[75%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 14 */}\n          <div className=\"absolute top-[81.25%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n          <div className=\"absolute top-[81.25%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 15 */}\n          <div className=\"absolute top-[87.5%] left-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Row 16 */}\n          <div className=\"absolute top-[93.75%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n\n          {/* Bottom row */}\n          <div className=\"absolute bottom-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\n        </div>\n      )}\n\n      <AvatarPrimitive.Root\n        ref={ref}\n        data-slot=\"avatar\"\n        className={cn(\n          \"relative flex size-10 shrink-0 overflow-hidden text-xs\",\n          !isPixel && \"rounded-none\",\n          isPixel && \"rounded-full\",\n          font !== \"normal\" && \"retro\",\n          variant === \"retro\" && \"image-rendering-pixelated\",\n          className\n        )}\n        {...props}\n      />\n\n      {/* Original border styling (only show if not pixel variant) */}\n      {!isPixel && (\n        <>\n          <div className=\"absolute top-0 left-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute bottom-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute top-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute bottom-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute top-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n          <div className=\"absolute bottom-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\n        </>\n      )}\n    </div>\n  );\n});\nAvatar.displayName = AvatarPrimitive.Root.displayName;\n\ninterface BitAvatarImageProps\n  extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> {\n  font?: \"normal\" | \"retro\";\n  variant?: \"default\" | \"retro\" | \"pixel\";\n}\n\nconst AvatarImage = forwardRef<\n  React.ComponentRef<typeof AvatarPrimitive.Image>,\n  BitAvatarImageProps\n>(({ className, font, ...props }, ref) => {\n  return (\n    <AvatarPrimitive.Image\n      ref={ref}\n      data-slot=\"avatar-image\"\n      className={cn(\n        \"aspect-square h-full w-full\",\n        font === \"retro\" && \"retro\",\n        className\n      )}\n      {...props}\n    />\n  );\n});\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\n\nconst AvatarFallback = forwardRef<\n  React.ComponentRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    data-slot=\"avatar-fallback\"\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-foreground\",\n      className\n    )}\n    {...props}\n  />\n));\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\n\nexport { Avatar, AvatarImage, AvatarFallback };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/avatar.tsx"
    },
    {
      "path": "components/ui/8bit/badge.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport { Badge as ShadcnBadge } from \"@/components/ui/badge\";\n\nexport const badgeVariants = cva(\"\", {\n  variants: {\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n    variant: {\n      default: \"bg-primary border-primary\",\n      destructive: \"bg-destructive border-destructive\",\n      outline: \"bg-background border-background\",\n      secondary: \"bg-secondary border-secondary\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport interface BitButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n}\n\nfunction Badge({\n  children,\n  className = \"\",\n  font,\n  variant,\n  ...props\n}: BitButtonProps) {\n  const color = badgeVariants({ variant, font });\n\n  const classes = className.split(\" \");\n\n  // spacing-related Tailwind classes\n  const spacingClasses = classes.filter((c) =>\n    /^(m|p|mt|mr|mb|ml|mx|my|pt|pr|pb|pl|px|py|top|bottom|left|right|inset|inset-x|inset-y)-/.test(\n      c\n    )\n  );\n\n  // visual classes for badge and sidebars\n  const visualClasses = classes.filter(\n    (c) =>\n      c.startsWith(\"bg-\") ||\n      c.startsWith(\"border-\") ||\n      c.startsWith(\"text-\") ||\n      c.startsWith(\"rounded-\")\n  );\n\n  return (\n    <div className={cn(\"relative inline-flex\", spacingClasses)}>\n      <ShadcnBadge\n        {...props}\n        className={cn(\n          \"rounded-none\",\n          font !== \"normal\" && \"retro\",\n          visualClasses\n        )}\n        variant={variant}\n      >\n        {children}\n      </ShadcnBadge>\n\n      {/* Left pixel bar */}\n      <div\n        className={cn(\n          \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5\",\n          color,\n          visualClasses\n        )}\n      />\n      {/* Right pixel bar */}\n      <div\n        className={cn(\n          \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5\",\n          color,\n          visualClasses\n        )}\n      />\n    </div>\n  );\n}\n\nexport { Badge };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/badge.tsx"
    },
    {
      "path": "components/ui/8bit/health-bar.tsx",
      "content": "import { BitProgressProps, Progress } from \"@/components/ui/8bit/progress\";\n\ninterface ManaBarProps extends React.ComponentProps<\"div\"> {\n  className?: string;\n  props?: BitProgressProps;\n  variant?: \"retro\" | \"default\";\n  value?: number;\n}\n\nexport default function HealthBar({\n  className,\n  variant,\n  value,\n  ...props\n}: ManaBarProps) {\n  return (\n    <Progress\n      {...props}\n      value={value}\n      variant={variant}\n      className={className}\n      progressBg=\"bg-red-500\"\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/health-bar.tsx"
    },
    {
      "path": "components/ui/8bit/mana-bar.tsx",
      "content": "import { BitProgressProps, Progress } from \"@/components/ui/8bit/progress\";\n\ninterface ManaBarProps extends React.ComponentProps<\"div\"> {\n  className?: string;\n  props?: BitProgressProps;\n  variant?: \"retro\" | \"default\";\n  value?: number;\n}\n\nexport default function ManaBar({\n  className,\n  variant,\n  value,\n  ...props\n}: ManaBarProps) {\n  return (\n    <Progress\n      {...props}\n      value={value}\n      variant={variant}\n      className={className}\n      progressBg=\"bg-blue-500\"\n    />\n  );\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/mana-bar.tsx"
    },
    {
      "path": "components/ui/8bit/progress.tsx",
      "content": "import * as ProgressPrimitive from \"@radix-ui/react-progress\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\";\n\nimport \"./styles/retro.css\";\n\nexport const progressVariants = cva(\"\", {\n  variants: {\n    variant: {\n      default: \"\",\n      retro: \"retro\",\n    },\n    font: {\n      normal: \"\",\n      retro: \"retro\",\n    },\n  },\n  defaultVariants: {\n    font: \"retro\",\n  },\n});\n\nexport interface BitProgressProps\n  extends React.ComponentProps<typeof ProgressPrimitive.Root>,\n    VariantProps<typeof progressVariants> {\n  className?: string;\n  font?: VariantProps<typeof progressVariants>[\"font\"];\n  progressBg?: string;\n}\n\nfunction Progress({\n  className,\n  font,\n  variant,\n  value,\n  progressBg,\n  ...props\n}: BitProgressProps) {\n  return (\n    <div className={cn(\"relative w-full\", className)}>\n      <ProgressPrimitive.Root\n        data-slot=\"progress\"\n        className={cn(\n          \"bg-primary/20 relative h-2 w-full overflow-hidden\",\n          font !== \"normal\" && \"retro\"\n        )}\n        {...props}\n      >\n        <ProgressPrimitive.Indicator\n          data-slot=\"progress-indicator\"\n          className={cn(\n            \"h-full transition-all\",\n            variant === \"retro\" ? \"flex\" : \"w-full flex-1\",\n            progressBg && variant !== \"retro\" ? progressBg : \"bg-primary\"\n          )}\n          style={\n            variant === \"retro\"\n              ? undefined\n              : { transform: `translateX(-${100 - (value || 0)}%)` }\n          }\n        >\n          {variant === \"retro\" && (\n            <div className=\"flex w-full\">\n              {Array.from({ length: 20 }).map((_, i) => {\n                const filledSquares = Math.round(((value || 0) / 100) * 20);\n                return (\n                  <div\n                    key={i}\n                    className={cn(\n                      \"size-2 mx-[1px] w-full\",\n                      i < filledSquares ? progressBg : \"bg-transparent\"\n                    )}\n                  />\n                );\n              })}\n            </div>\n          )}\n        </ProgressPrimitive.Indicator>\n      </ProgressPrimitive.Root>\n\n      <div\n        className=\"absolute inset-0 border-y-4 -my-1 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n\n      <div\n        className=\"absolute inset-0 border-x-4 -mx-1 border-foreground dark:border-ring pointer-events-none\"\n        aria-hidden=\"true\"\n      />\n    </div>\n  );\n}\n\nexport { Progress };\n",
      "type": "registry:component",
      "target": "components/ui/8bit/progress.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\n\n.retro {\n  font-family:\n    \"Press Start 2P\",\n    system-ui,\n    -apple-system,\n    sans-serif;\n  line-height: 1.5;\n  letter-spacing: 0.5px;\n}\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}