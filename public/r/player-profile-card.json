{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "player-profile-card",
  "type": "registry:component",
  "title": "8-bit Player Profile Card",
  "description": "A comprehensive player profile card component with stats, health/mana bars, and custom stats support.",
  "registryDependencies": [
    "card",
    "avatar",
    "badge",
    "progress"
  ],
  "files": [
    {
      "path": "components/ui/8bit/blocks/player-profile-card.tsx",
      "content": "import React from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Avatar,\r\n  AvatarFallback,\r\n  AvatarImage,\r\n} from \"@/components/ui/8bit/avatar\";\r\nimport { Badge } from \"@/components/ui/8bit/badge\";\r\nimport { Card, CardContent, CardHeader } from \"@/components/ui/8bit/card\";\r\nimport HealthBar from \"@/components/ui/8bit/health-bar\";\r\nimport ManaBar from \"@/components/ui/8bit/mana-bar\";\r\nimport { Progress } from \"@/components/ui/8bit/progress\";\r\nimport \"@/components/ui/8bit/styles/retro.css\";\r\n\r\nexport interface PlayerStats {\r\n  health?: {\r\n    current: number;\r\n    max: number;\r\n  };\r\n  mana?: {\r\n    current: number;\r\n    max: number;\r\n  };\r\n  experience?: {\r\n    current: number;\r\n    max: number;\r\n  };\r\n  level?: number;\r\n  [key: string]: unknown; // Allow custom stats\r\n}\r\n\r\nexport interface PlayerProfileCardProps {\r\n  className?: string;\r\n  playerName: string;\r\n  avatarSrc?: string;\r\n  avatarFallback?: string;\r\n  level?: number;\r\n  stats?: PlayerStats;\r\n  playerClass?: string;\r\n  showLevel?: boolean;\r\n  showHealth?: boolean;\r\n  showMana?: boolean;\r\n  showExperience?: boolean;\r\n  customStats?: Array<{\r\n    label: string;\r\n    value: number;\r\n    max?: number;\r\n    color?: string;\r\n    variant?: \"retro\" | \"default\";\r\n  }>;\r\n}\r\n\r\nexport default function PlayerProfileCard({\r\n  className,\r\n  playerName,\r\n  avatarSrc,\r\n  avatarFallback,\r\n  level = 1,\r\n  stats,\r\n  playerClass,\r\n  showLevel = true,\r\n  showHealth = true,\r\n  showMana = true,\r\n  showExperience = true,\r\n  customStats = [],\r\n  ...props\r\n}: PlayerProfileCardProps) {\r\n  const healthPercentage = stats?.health\r\n    ? Math.round((stats.health.current / stats.health.max) * 100)\r\n    : 0;\r\n\r\n  const manaPercentage = stats?.mana\r\n    ? Math.round((stats.mana.current / stats.mana.max) * 100)\r\n    : 0;\r\n\r\n  const experiencePercentage = stats?.experience\r\n    ? Math.round((stats.experience.current / stats.experience.max) * 100)\r\n    : 0;\r\n\r\n  return (\r\n    <Card className={cn(\"w-full max-w-md\", className)} {...props}>\r\n      <CardHeader className=\"pb-4\">\r\n        <div className=\"flex items-center gap-4\">\r\n          <Avatar className=\"size-16\" variant=\"pixel\" font=\"retro\">\r\n            <AvatarImage src={avatarSrc} alt={playerName} />\r\n            <AvatarFallback className=\"text-lg\">\r\n              {avatarFallback || playerName.charAt(0).toUpperCase()}\r\n            </AvatarFallback>\r\n          </Avatar>\r\n\r\n          <div className=\"flex-1 min-w-0\">\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex flex-col gap-1 md:flex-row md:items-center md:gap-2 justify-between\">\r\n                <h3 className=\"font-bold truncate md:text-lg\">{playerName}</h3>\r\n                {showLevel && (\r\n                  <span>\r\n                    <Badge className=\"text-xs\">Lv.{level}</Badge>\r\n                  </span>\r\n                )}\r\n              </div>\r\n              <div className=\"flex flex-wrap gap-1\">\r\n                {playerClass && (\r\n                  <span className=\"text-xs text-muted-foreground\">\r\n                    {playerClass}\r\n                  </span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Health Bar */}\r\n        {showHealth && stats?.health && (\r\n          <div className=\"space-y-1\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm font-medium\">Health</span>\r\n              <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\r\n                {stats.health.current}/{stats.health.max}\r\n              </span>\r\n            </div>\r\n            <HealthBar\r\n              value={healthPercentage}\r\n              variant=\"retro\"\r\n              className=\"h-3\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Mana Bar */}\r\n        {showMana && stats?.mana && (\r\n          <div className=\"space-y-1\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm font-medium\">Mana</span>\r\n              <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\r\n                {stats.mana.current}/{stats.mana.max}\r\n              </span>\r\n            </div>\r\n            <ManaBar value={manaPercentage} variant=\"retro\" className=\"h-3\" />\r\n          </div>\r\n        )}\r\n\r\n        {/* Experience Bar */}\r\n        {showExperience && stats?.experience && (\r\n          <div className=\"space-y-1\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <span className=\"text-sm font-medium\">Experience</span>\r\n              <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\r\n                {stats.experience.current}/{stats.experience.max} XP\r\n              </span>\r\n            </div>\r\n            <Progress\r\n              value={experiencePercentage}\r\n              variant=\"retro\"\r\n              progressBg=\"bg-yellow-500\"\r\n              className=\"h-3\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Custom Stats */}\r\n        {customStats.length > 0 && (\r\n          <div className=\"space-y-2\">\r\n            {customStats.map((stat, index) => {\r\n              const percentage = stat.max\r\n                ? Math.round((stat.value / stat.max) * 100)\r\n                : 0;\r\n\r\n              return (\r\n                <div key={index} className=\"space-y-1\">\r\n                  <div className=\"flex justify-between items-center\">\r\n                    <span className=\"text-sm font-medium\">{stat.label}</span>\r\n                    <span className=\"text-[9px] sm:text-xs text-muted-foreground retro\">\r\n                      {stat.value}\r\n                      {stat.max ? `/${stat.max}` : \"\"}\r\n                    </span>\r\n                  </div>\r\n                  <Progress\r\n                    value={percentage}\r\n                    variant={stat.variant || \"retro\"}\r\n                    progressBg={stat.color || \"bg-primary\"}\r\n                    className=\"h-3\"\r\n                  />\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/blocks/player-profile-card.tsx"
    },
    {
      "path": "components/ui/8bit/card.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport {\r\n  Card as ShadcnCard,\r\n  CardAction as ShadcnCardAction,\r\n  CardContent as ShadcnCardContent,\r\n  CardDescription as ShadcnCardDescription,\r\n  CardFooter as ShadcnCardFooter,\r\n  CardHeader as ShadcnCardHeader,\r\n  CardTitle as ShadcnCardTitle,\r\n} from \"@/components/ui/card\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport const cardVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n  },\r\n});\r\n\r\nexport interface BitCardProps\r\n  extends React.ComponentProps<\"div\">,\r\n    VariantProps<typeof cardVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Card({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"relative border-y-6 border-foreground dark:border-ring !p-0\",\r\n        className\r\n      )}\r\n    >\r\n      <ShadcnCard\r\n        {...props}\r\n        className={cn(\r\n          \"rounded-none border-0 !w-full\",\r\n          font !== \"normal\" && \"retro\",\r\n          className\r\n        )}\r\n      />\r\n\r\n      <div\r\n        className=\"absolute inset-0 border-x-6 -mx-1.5 border-foreground dark:border-ring pointer-events-none\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CardHeader({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardHeader\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardTitle({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardTitle\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardDescription({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardDescription\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardAction({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardAction\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardContent({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardContent\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CardFooter({ ...props }: BitCardProps) {\r\n  const { className, font } = props;\r\n\r\n  return (\r\n    <ShadcnCardFooter\r\n      data-slot=\"card-footer\"\r\n      className={cn(font !== \"normal\" && \"retro\", className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport {\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  CardTitle,\r\n  CardAction,\r\n  CardDescription,\r\n  CardContent,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/card.tsx"
    },
    {
      "path": "components/ui/8bit/avatar.tsx",
      "content": "import type React from \"react\";\r\nimport { forwardRef } from \"react\";\r\n\r\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\";\r\nimport { cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport const avatarVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n    variant: {\r\n      default: \"\",\r\n      retro: \"\",\r\n      pixel: \"\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n    variant: \"pixel\",\r\n  },\r\n});\r\n\r\nconst Avatar = forwardRef<\r\n  React.ComponentRef<typeof AvatarPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root> & {\r\n    font?: \"normal\" | \"retro\";\r\n    variant?: \"default\" | \"retro\" | \"pixel\";\r\n  }\r\n>(({ className = \"\", font, variant = \"pixel\", ...props }, ref) => {\r\n  const isPixel = variant === \"pixel\";\r\n\r\n  return (\r\n    <div className={cn(\"relative size-max\", className)}>\r\n      {/* Pixel frame (only show if pixel variant) */}\r\n      {isPixel && (\r\n        <div\r\n          className=\"absolute inset-0 w-full h-full pointer-events-none\"\r\n          style={{ zIndex: 10 }}\r\n        >\r\n          {/* Top black border */}\r\n          <div className=\"absolute top-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Second row */}\r\n          <div className=\"absolute top-[6.25%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Third row */}\r\n          <div className=\"absolute top-[12.5%] left-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\r\n          <div className=\"absolute top-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring w-[18.75%]\"></div>\r\n\r\n          {/* Fourth row */}\r\n          <div className=\"absolute top-[18.75%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[18.75%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Fifth row */}\r\n          <div className=\"absolute top-[25%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[25%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Rows 6-7 */}\r\n          <div className=\"absolute top-[31.25%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[31.25%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Rows 8-10 */}\r\n          <div className=\"absolute top-[43.75%] left-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[43.75%] right-0 w-[12.5%] h-[18.75%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Rows 11-12 */}\r\n          <div className=\"absolute top-[62.5%] left-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[62.5%] right-0 w-[12.5%] h-[12.5%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 13 */}\r\n          <div className=\"absolute top-[75%] left-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[75%] right-0 w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 14 */}\r\n          <div className=\"absolute top-[81.25%] left-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n          <div className=\"absolute top-[81.25%] right-[6.25%] w-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 15 */}\r\n          <div className=\"absolute top-[87.5%] left-[12.5%] right-[12.5%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Row 16 */}\r\n          <div className=\"absolute top-[93.75%] left-[18.75%] right-[18.75%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n\r\n          {/* Bottom row */}\r\n          <div className=\"absolute bottom-0 left-[25%] right-[25%] h-[6.25%] bg-foreground dark:bg-ring\"></div>\r\n        </div>\r\n      )}\r\n\r\n      <AvatarPrimitive.Root\r\n        ref={ref}\r\n        data-slot=\"avatar\"\r\n        className={cn(\r\n          \"relative flex size-10 shrink-0 overflow-hidden text-xs\",\r\n          !isPixel && \"rounded-none\",\r\n          isPixel && \"rounded-full\",\r\n          font !== \"normal\" && \"retro\",\r\n          variant === \"retro\" && \"image-rendering-pixelated\",\r\n          className\r\n        )}\r\n        {...props}\r\n      />\r\n\r\n      {/* Original border styling (only show if not pixel variant) */}\r\n      {!isPixel && (\r\n        <>\r\n          <div className=\"absolute top-0 left-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute bottom-0 w-full h-1.5 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute top-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute bottom-1.5 -left-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute top-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n          <div className=\"absolute bottom-1.5 -right-1.5 w-1.5 h-1/2 bg-foreground dark:bg-ring pointer-events-none\" />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\nAvatar.displayName = AvatarPrimitive.Root.displayName;\r\n\r\ninterface BitAvatarImageProps\r\n  extends React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image> {\r\n  font?: \"normal\" | \"retro\";\r\n  variant?: \"default\" | \"retro\" | \"pixel\";\r\n}\r\n\r\nconst AvatarImage = forwardRef<\r\n  React.ComponentRef<typeof AvatarPrimitive.Image>,\r\n  BitAvatarImageProps\r\n>(({ className, font, ...props }, ref) => {\r\n  return (\r\n    <AvatarPrimitive.Image\r\n      ref={ref}\r\n      data-slot=\"avatar-image\"\r\n      className={cn(\r\n        \"aspect-square h-full w-full\",\r\n        font === \"retro\" && \"retro\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nAvatarImage.displayName = AvatarPrimitive.Image.displayName;\r\n\r\nconst AvatarFallback = forwardRef<\r\n  React.ComponentRef<typeof AvatarPrimitive.Fallback>,\r\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\r\n>(({ className, ...props }, ref) => (\r\n  <AvatarPrimitive.Fallback\r\n    ref={ref}\r\n    data-slot=\"avatar-fallback\"\r\n    className={cn(\r\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;\r\n\r\nexport { Avatar, AvatarImage, AvatarFallback };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/avatar.tsx"
    },
    {
      "path": "components/ui/8bit/badge.tsx",
      "content": "import { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { Badge as ShadcnBadge } from \"@/components/ui/badge\";\r\n\r\nexport const badgeVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n    variant: {\r\n      default: \"bg-primary border-primary\",\r\n      destructive: \"bg-destructive border-destructive\",\r\n      outline: \"bg-background border-background\",\r\n      secondary: \"bg-secondary border-secondary\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"default\",\r\n  },\r\n});\r\n\r\nexport interface BitButtonProps\r\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n    VariantProps<typeof badgeVariants> {\r\n  asChild?: boolean;\r\n}\r\n\r\nfunction Badge({\r\n  children,\r\n  className = \"\",\r\n  font,\r\n  variant,\r\n  ...props\r\n}: BitButtonProps) {\r\n  const color = badgeVariants({ variant, font });\r\n\r\n  const classes = className.split(\" \");\r\n\r\n  // spacing-related Tailwind classes\r\n  const spacingClasses = classes.filter((c) =>\r\n    /^(m|p|mt|mr|mb|ml|mx|my|pt|pr|pb|pl|px|py|top|bottom|left|right|inset|inset-x|inset-y)-/.test(\r\n      c\r\n    )\r\n  );\r\n\r\n  // visual classes for badge and sidebars\r\n  const visualClasses = classes.filter(\r\n    (c) =>\r\n      c.startsWith(\"bg-\") ||\r\n      c.startsWith(\"border-\") ||\r\n      c.startsWith(\"text-\") ||\r\n      c.startsWith(\"rounded-\")\r\n  );\r\n\r\n  return (\r\n    <div className={cn(\"relative inline-flex\", spacingClasses)}>\r\n      <ShadcnBadge\r\n        {...props}\r\n        className={cn(\r\n          \"rounded-none\",\r\n          font !== \"normal\" && \"retro\",\r\n          visualClasses\r\n        )}\r\n        variant={variant}\r\n      >\r\n        {children}\r\n      </ShadcnBadge>\r\n\r\n      {/* Left pixel bar */}\r\n      <div\r\n        className={cn(\r\n          \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5\",\r\n          color,\r\n          visualClasses\r\n        )}\r\n      />\r\n      {/* Right pixel bar */}\r\n      <div\r\n        className={cn(\r\n          \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5\",\r\n          color,\r\n          visualClasses\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Badge };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/badge.tsx"
    },
    {
      "path": "components/ui/8bit/health-bar.tsx",
      "content": "import { BitProgressProps, Progress } from \"@/components/ui/8bit/progress\";\r\n\r\ninterface ManaBarProps extends React.ComponentProps<\"div\"> {\r\n  className?: string;\r\n  props?: BitProgressProps;\r\n  variant?: \"retro\" | \"default\";\r\n  value?: number;\r\n}\r\n\r\nexport default function HealthBar({\r\n  className,\r\n  variant,\r\n  value,\r\n  ...props\r\n}: ManaBarProps) {\r\n  return (\r\n    <Progress\r\n      {...props}\r\n      value={value}\r\n      variant={variant}\r\n      className={className}\r\n      progressBg=\"bg-red-500\"\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/health-bar.tsx"
    },
    {
      "path": "components/ui/8bit/mana-bar.tsx",
      "content": "import { BitProgressProps, Progress } from \"@/components/ui/8bit/progress\";\r\n\r\ninterface ManaBarProps extends React.ComponentProps<\"div\"> {\r\n  className?: string;\r\n  props?: BitProgressProps;\r\n  variant?: \"retro\" | \"default\";\r\n  value?: number;\r\n}\r\n\r\nexport default function ManaBar({\r\n  className,\r\n  variant,\r\n  value,\r\n  ...props\r\n}: ManaBarProps) {\r\n  return (\r\n    <Progress\r\n      {...props}\r\n      value={value}\r\n      variant={variant}\r\n      className={className}\r\n      progressBg=\"bg-blue-500\"\r\n    />\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/mana-bar.tsx"
    },
    {
      "path": "components/ui/8bit/progress.tsx",
      "content": "import * as ProgressPrimitive from \"@radix-ui/react-progress\";\r\nimport { type VariantProps, cva } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\nexport const progressVariants = cva(\"\", {\r\n  variants: {\r\n    variant: {\r\n      default: \"\",\r\n      retro: \"retro\",\r\n    },\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n  },\r\n});\r\n\r\nexport interface BitProgressProps\r\n  extends React.ComponentProps<typeof ProgressPrimitive.Root>,\r\n    VariantProps<typeof progressVariants> {\r\n  className?: string;\r\n  font?: VariantProps<typeof progressVariants>[\"font\"];\r\n  progressBg?: string;\r\n}\r\n\r\nfunction Progress({\r\n  className,\r\n  font,\r\n  variant,\r\n  value,\r\n  progressBg,\r\n  ...props\r\n}: BitProgressProps) {\r\n  // Extract height from className if present\r\n  const heightMatch = className?.match(/h-(\\d+|\\[.*?\\])/);\r\n  const heightClass = heightMatch ? heightMatch[0] : \"h-2\";\r\n\r\n  return (\r\n    <div className={cn(\"relative w-full\", className)}>\r\n      <ProgressPrimitive.Root\r\n        data-slot=\"progress\"\r\n        className={cn(\r\n          \"bg-primary/20 relative w-full overflow-hidden\",\r\n          heightClass,\r\n          font !== \"normal\" && \"retro\"\r\n        )}\r\n        {...props}\r\n      >\r\n        <ProgressPrimitive.Indicator\r\n          data-slot=\"progress-indicator\"\r\n          className={cn(\r\n            \"h-full transition-all\",\r\n            variant === \"retro\" ? \"flex\" : \"w-full flex-1\",\r\n            progressBg && variant !== \"retro\" ? progressBg : \"bg-primary\"\r\n          )}\r\n          style={\r\n            variant === \"retro\"\r\n              ? undefined\r\n              : { transform: `translateX(-${100 - (value || 0)}%)` }\r\n          }\r\n        >\r\n          {variant === \"retro\" && (\r\n            <div className=\"flex w-full\">\r\n              {Array.from({ length: 20 }).map((_, i) => {\r\n                const filledSquares = Math.round(((value || 0) / 100) * 20);\r\n                return (\r\n                  <div\r\n                    key={i}\r\n                    className={cn(\r\n                      \"size-full mx-[1px]\",\r\n                      i < filledSquares ? progressBg : \"bg-transparent\"\r\n                    )}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </ProgressPrimitive.Indicator>\r\n      </ProgressPrimitive.Root>\r\n\r\n      <div\r\n        className=\"absolute inset-0 border-y-4 -my-1 border-foreground dark:border-ring pointer-events-none\"\r\n        aria-hidden=\"true\"\r\n      />\r\n\r\n      <div\r\n        className=\"absolute inset-0 border-x-4 -mx-1 border-foreground dark:border-ring pointer-events-none\"\r\n        aria-hidden=\"true\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Progress };\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/progress.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\r\n\r\n.retro {\r\n  font-family:\r\n    \"Press Start 2P\",\r\n    system-ui,\r\n    -apple-system,\r\n    sans-serif;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}