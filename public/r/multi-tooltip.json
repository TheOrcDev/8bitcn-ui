{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "multi-tooltip",
  "type": "registry:component",
  "title": "8-bit MultiTooltip",
  "description": "Displays multiple 8-bit tooltips around a single trigger element.",
  "registryDependencies": [
    "multi-tooltip"
  ],
  "files": [
    {
      "path": "components/ui/8bit/multi-tooltip.tsx",
      "content": "\"use client\";\r\n\r\nimport type * as React from \"react\";\r\nimport {\r\n  createContext,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\n\r\nimport { type VariantProps, cva } from \"class-variance-authority\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nimport { TooltipContent as ShadcnTooltipContent } from \"@/components/ui/tooltip\";\r\n\r\nimport \"./styles/retro.css\";\r\n\r\ntype Position =\r\n  | \"top\"\r\n  | \"top-right\"\r\n  | \"right\"\r\n  | \"bottom-right\"\r\n  | \"bottom\"\r\n  | \"bottom-left\"\r\n  | \"left\"\r\n  | \"top-left\";\r\n\r\nexport const multiTooltipVariants = cva(\"\", {\r\n  variants: {\r\n    font: {\r\n      normal: \"\",\r\n      retro: \"retro\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    font: \"retro\",\r\n  },\r\n});\r\n\r\nconst MultiTooltipContext = createContext<{\r\n  delayDuration?: number;\r\n}>({});\r\n\r\nexport interface BitMultiTooltipContentProps\r\n  extends React.ComponentPropsWithoutRef<typeof ShadcnTooltipContent>,\r\n    VariantProps<typeof multiTooltipVariants> {\r\n  content: string;\r\n  position?: Position;\r\n}\r\n\r\nfunction MultiTooltipContent({\r\n  className,\r\n  content,\r\n  font,\r\n  position,\r\n  ...props\r\n}: BitMultiTooltipContentProps) {\r\n  const color = multiTooltipVariants({ font });\r\n\r\n  return (\r\n    <div className={cn(\"relative inline-flex\", className)}>\r\n      <div\r\n        data-slot=\"multitooltip-content\"\r\n        role=\"tooltip\"\r\n        className={cn(\r\n          \"z-50 overflow-hidden bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 rounded-none\",\r\n          content.length < 20\r\n            ? \"px-2 py-1 text-xs whitespace-nowrap\"\r\n            : content.length < 100\r\n              ? \"px-3 py-2 text-sm whitespace-nowrap\"\r\n              : \"px-4 py-3 text-sm max-w-72 leading-relaxed whitespace-normal\",\r\n          color,\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {content}\r\n\r\n        {position === \"top\" && (\r\n          <div className=\"absolute top-full left-1/2 -translate-x-1/2 border-l-4 border-r-4 border-t-4 border-transparent border-t-primary\" />\r\n        )}\r\n        {position === \"bottom\" && (\r\n          <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 border-l-4 border-r-4 border-b-4 border-transparent border-b-primary\" />\r\n        )}\r\n        {position === \"left\" && (\r\n          <div className=\"absolute left-full top-1/2 -translate-y-1/2 border-t-4 border-b-4 border-l-4 border-transparent border-l-primary\" />\r\n        )}\r\n        {position === \"right\" && (\r\n          <div className=\"absolute right-full top-1/2 -translate-y-1/2 border-t-4 border-b-4 border-r-4 border-transparent border-r-primary\" />\r\n        )}\r\n        {position === \"top-left\" && (\r\n          <div className=\"absolute top-full left-4 border-l-4 border-r-4 border-t-4 border-transparent border-t-primary\" />\r\n        )}\r\n        {position === \"top-right\" && (\r\n          <div className=\"absolute top-full right-4 border-l-4 border-r-4 border-t-4 border-transparent border-t-primary\" />\r\n        )}\r\n        {position === \"bottom-left\" && (\r\n          <div className=\"absolute bottom-full left-4 border-l-4 border-r-4 border-b-4 border-transparent border-b-primary\" />\r\n        )}\r\n        {position === \"bottom-right\" && (\r\n          <div className=\"absolute bottom-full right-4 border-l-4 border-r-4 border-b-4 border-transparent border-b-primary\" />\r\n        )}\r\n\r\n        <div\r\n          className={cn(\r\n            \"absolute top-1.5 bottom-1.5 -left-1.5 h-1/2 w-1.5 bg-primary\",\r\n            color\r\n          )}\r\n        />\r\n        <div\r\n          className={cn(\r\n            \"absolute top-1.5 bottom-1.5 -right-1.5 h-1/2 w-1.5 bg-primary\",\r\n            color\r\n          )}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport interface BitMultiTooltipProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof multiTooltipVariants> {\r\n  children: React.ReactNode;\r\n  tooltips: Array<{\r\n    content: string;\r\n    position: Position;\r\n  }>;\r\n  gap?: number;\r\n  hideDelay?: number;\r\n  delayDuration?: number;\r\n  tooltipClassName?: string;\r\n}\r\n\r\nfunction MultiTooltip({\r\n  children,\r\n  tooltips,\r\n  gap = 8,\r\n  hideDelay = 100,\r\n  delayDuration,\r\n  className,\r\n  tooltipClassName,\r\n  font,\r\n  ...props\r\n}: BitMultiTooltipProps) {\r\n  const context = useContext(MultiTooltipContext);\r\n  const effectiveDelayDuration = delayDuration ?? context.delayDuration ?? 0;\r\n\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [positions, setPositions] = useState<\r\n    Array<{ left: number; top: number }>\r\n  >([]);\r\n\r\n  const triggerRef = useRef<HTMLDivElement | null>(null);\r\n  const tooltipRefs = useRef<Array<HTMLDivElement | null>>([]);\r\n\r\n  const hoverTriggerRef = useRef(false);\r\n  const hoverTooltipRef = useRef(false);\r\n  const showTimeoutRef = useRef<number | null>(null);\r\n  const hideTimeoutRef = useRef<number | null>(null);\r\n\r\n  const clearTimeouts = () => {\r\n    if (showTimeoutRef.current) {\r\n      window.clearTimeout(showTimeoutRef.current);\r\n      showTimeoutRef.current = null;\r\n    }\r\n    if (hideTimeoutRef.current) {\r\n      window.clearTimeout(hideTimeoutRef.current);\r\n      hideTimeoutRef.current = null;\r\n    }\r\n  };\r\n\r\n  const show = useCallback(() => {\r\n    clearTimeouts();\r\n    if (effectiveDelayDuration > 0) {\r\n      showTimeoutRef.current = window.setTimeout(() => {\r\n        setIsVisible(true);\r\n        showTimeoutRef.current = null;\r\n      }, effectiveDelayDuration);\r\n    } else {\r\n      setIsVisible(true);\r\n    }\r\n  }, [effectiveDelayDuration]);\r\n\r\n  const hideWithDelay = useCallback(() => {\r\n    clearTimeouts();\r\n    hideTimeoutRef.current = window.setTimeout(() => {\r\n      if (!hoverTriggerRef.current && !hoverTooltipRef.current) {\r\n        setIsVisible(false);\r\n      }\r\n      hideTimeoutRef.current = null;\r\n    }, hideDelay);\r\n  }, [hideDelay]);\r\n\r\n  const computePositions = useCallback(() => {\r\n    const trigger = triggerRef.current;\r\n    if (!trigger) return;\r\n\r\n    const triggerRect = trigger.getBoundingClientRect();\r\n    const newPositions: Array<{ left: number; top: number }> = [];\r\n\r\n    tooltips.forEach((tooltip, index) => {\r\n      const tooltipEl = tooltipRefs.current[index];\r\n      if (!tooltipEl) return;\r\n\r\n      const tooltipRect = tooltipEl.getBoundingClientRect();\r\n      let left = 0;\r\n      let top = 0;\r\n\r\n      switch (tooltip.position) {\r\n        case \"top\":\r\n          left =\r\n            triggerRect.left + triggerRect.width / 2 - tooltipRect.width / 2;\r\n          top = triggerRect.top - tooltipRect.height - gap - 2;\r\n          break;\r\n        case \"top-right\":\r\n          left = triggerRect.right - tooltipRect.width / 2;\r\n          top = triggerRect.top - tooltipRect.height - gap;\r\n          break;\r\n        case \"right\":\r\n          left = triggerRect.right + gap + 4;\r\n          top =\r\n            triggerRect.top + triggerRect.height / 2 - tooltipRect.height / 2;\r\n          break;\r\n        case \"bottom-right\":\r\n          left = triggerRect.right - tooltipRect.width / 2;\r\n          top = triggerRect.bottom + gap;\r\n          break;\r\n        case \"bottom\":\r\n          left =\r\n            triggerRect.left + triggerRect.width / 2 - tooltipRect.width / 2;\r\n          top = triggerRect.bottom + gap + 2;\r\n          break;\r\n        case \"bottom-left\":\r\n          left = triggerRect.left - tooltipRect.width / 2;\r\n          top = triggerRect.bottom + gap;\r\n          break;\r\n        case \"left\":\r\n          left = triggerRect.left - tooltipRect.width - gap - 4;\r\n          top =\r\n            triggerRect.top + triggerRect.height / 2 - tooltipRect.height / 2;\r\n          break;\r\n        case \"top-left\":\r\n          left = triggerRect.left - tooltipRect.width / 2;\r\n          top = triggerRect.top - tooltipRect.height - gap;\r\n          break;\r\n      }\r\n\r\n      const padding = 8;\r\n      left = Math.max(\r\n        padding,\r\n        Math.min(left, window.innerWidth - tooltipRect.width - padding)\r\n      );\r\n      top = Math.max(\r\n        padding,\r\n        Math.min(top, window.innerHeight - tooltipRect.height - padding)\r\n      );\r\n\r\n      newPositions.push({ left, top });\r\n    });\r\n\r\n    setPositions(newPositions);\r\n  }, [gap, tooltips]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (!isVisible) return;\r\n    computePositions();\r\n    const raf = requestAnimationFrame(() => computePositions());\r\n    return () => cancelAnimationFrame(raf);\r\n  }, [isVisible, computePositions]);\r\n\r\n  useEffect(() => {\r\n    if (!isVisible) return;\r\n\r\n    const handleResize = () => computePositions();\r\n    const handleScroll = () => computePositions();\r\n    const hideOnTouch = () => setIsVisible(false);\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n    window.addEventListener(\"scroll\", handleScroll, true);\r\n    window.addEventListener(\"touchmove\", hideOnTouch, { passive: true });\r\n    document.addEventListener(\"touchmove\", hideOnTouch, { passive: true });\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      window.removeEventListener(\"scroll\", handleScroll, true);\r\n      window.removeEventListener(\"touchmove\", hideOnTouch);\r\n      document.removeEventListener(\"touchmove\", hideOnTouch);\r\n    };\r\n  }, [isVisible, computePositions]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      clearTimeouts();\r\n    };\r\n  }, []);\r\n\r\n  const canPortal = typeof document !== \"undefined\";\r\n\r\n  const onTriggerEnter = () => {\r\n    hoverTriggerRef.current = true;\r\n    show();\r\n  };\r\n\r\n  const onTriggerLeave = () => {\r\n    hoverTriggerRef.current = false;\r\n    hideWithDelay();\r\n  };\r\n\r\n  const onTooltipEnter = () => {\r\n    hoverTooltipRef.current = true;\r\n    clearTimeouts();\r\n  };\r\n\r\n  const onTooltipLeave = () => {\r\n    hoverTooltipRef.current = false;\r\n    hideWithDelay();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        ref={triggerRef}\r\n        data-slot=\"multitooltip\"\r\n        className={cn(\"relative inline-block w-fit\", className)}\r\n        onMouseEnter={onTriggerEnter}\r\n        onMouseLeave={onTriggerLeave}\r\n        onFocus={onTriggerEnter}\r\n        onBlur={onTriggerLeave}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n\r\n      {canPortal &&\r\n        createPortal(\r\n          <>\r\n            {isVisible &&\r\n              tooltips.map((tooltip, index) => (\r\n                <div\r\n                  key={index}\r\n                  ref={(el) => {\r\n                    tooltipRefs.current[index] = el;\r\n                  }}\r\n                  className=\"fixed z-[99999] pointer-events-auto\"\r\n                  style={{\r\n                    left: `${positions[index]?.left || 0}px`,\r\n                    top: `${positions[index]?.top || 0}px`,\r\n                    animationDelay: `${index * 50}ms`,\r\n                  }}\r\n                  onMouseEnter={onTooltipEnter}\r\n                  onMouseLeave={onTooltipLeave}\r\n                  data-state={isVisible ? \"open\" : \"closed\"}\r\n                >\r\n                  <MultiTooltipContent\r\n                    content={tooltip.content}\r\n                    position={tooltip.position}\r\n                    font={font}\r\n                    className={tooltipClassName}\r\n                  />\r\n                </div>\r\n              ))}\r\n          </>,\r\n          document.body\r\n        )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport interface BitMultiTooltipProviderProps\r\n  extends React.ComponentPropsWithoutRef<\"div\"> {\r\n  delayDuration?: number;\r\n}\r\n\r\nfunction MultiTooltipProvider({\r\n  children,\r\n  delayDuration,\r\n  ...restProps\r\n}: BitMultiTooltipProviderProps) {\r\n  return (\r\n    <MultiTooltipContext.Provider value={{ delayDuration }}>\r\n      <div data-slot=\"multitooltip-provider\" {...restProps}>\r\n        {children}\r\n      </div>\r\n    </MultiTooltipContext.Provider>\r\n  );\r\n}\r\n\r\nfunction MultiTooltipTrigger({\r\n  children,\r\n  ...props\r\n}: React.ComponentPropsWithoutRef<\"div\">) {\r\n  return (\r\n    <div data-slot=\"multitooltip-trigger\" {...props}>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport {\r\n  MultiTooltip,\r\n  MultiTooltipContent,\r\n  MultiTooltipProvider,\r\n  MultiTooltipTrigger,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/multi-tooltip.tsx"
    },
    {
      "path": "components/ui/8bit/styles/retro.css",
      "content": "@import url(\"https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap\");\r\n\r\n.retro {\r\n  font-family:\r\n    \"Press Start 2P\",\r\n    system-ui,\r\n    -apple-system,\r\n    sans-serif;\r\n  line-height: 1.5;\r\n  letter-spacing: 0.5px;\r\n}\r\n",
      "type": "registry:component",
      "target": "components/ui/8bit/styles/retro.css"
    }
  ]
}